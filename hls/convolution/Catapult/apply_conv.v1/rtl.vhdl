-- ----------------------------------------------------------------------
--  HLS HDL:        VHDL Netlister
--  HLS Version:    10.0a/269363 Production Release
--  HLS Date:       Wed Nov  9 17:38:00 PST 2016
-- 
--  Generated by:   xph3sei702@cimeld95
--  Generated date: Wed Jan 24 16:07:55 2018
-- ----------------------------------------------------------------------

-- 
-- ------------------------------------------------------------------
--  Design Unit:    ram_Xilinx_ARTIX_7_2_RAMSB_singleport_rwport_en_3_59292_10_16_0_1_0_0_0_1_1_1_0_59292_10_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.funcs.ALL;
USE mgc_hls.mgc_ioport_comps_v11.ALL;
USE mgc_hls.singleport_ram_be_pkg.ALL;


ENTITY ram_Xilinx_ARTIX_7_2_RAMSB_singleport_rwport_en_3_59292_10_16_0_1_0_0_0_1_1_1_0_59292_10_1_gen
    IS
  PORT(
    en : OUT STD_LOGIC;
    data_out : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
    we : OUT STD_LOGIC;
    re : OUT STD_LOGIC;
    addr : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
    data_in : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    data_in_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
    addr_d : IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    re_d : IN STD_LOGIC;
    we_d : IN STD_LOGIC;
    data_out_d : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    en_d : IN STD_LOGIC
  );
END ram_Xilinx_ARTIX_7_2_RAMSB_singleport_rwport_en_3_59292_10_16_0_1_0_0_0_1_1_1_0_59292_10_1_gen;

ARCHITECTURE v1 OF ram_Xilinx_ARTIX_7_2_RAMSB_singleport_rwport_en_3_59292_10_16_0_1_0_0_0_1_1_1_0_59292_10_1_gen
    IS
  -- Default Constants

BEGIN
  -- Default Constant Signal Assignments

  en <= (en_d);
  data_out_d <= data_out;
  we <= (we_d);
  re <= (re_d);
  addr <= (addr_d);
  data_in <= (data_in_d);
END v1;

-- ------------------------------------------------------------------
--  Design Unit:    ram_Xilinx_ARTIX_7_2_RAMSB_singleport_wport_2_57600_11_16_0_1_0_0_0_1_1_1_0_57600_11_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.funcs.ALL;
USE mgc_hls.mgc_ioport_comps_v11.ALL;
USE mgc_hls.singleport_ram_be_pkg.ALL;


ENTITY ram_Xilinx_ARTIX_7_2_RAMSB_singleport_wport_2_57600_11_16_0_1_0_0_0_1_1_1_0_57600_11_1_gen
    IS
  PORT(
    we : OUT STD_LOGIC;
    addr : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
    data_in : OUT STD_LOGIC_VECTOR (10 DOWNTO 0);
    data_in_d : IN STD_LOGIC_VECTOR (10 DOWNTO 0);
    addr_d : IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    we_d : IN STD_LOGIC
  );
END ram_Xilinx_ARTIX_7_2_RAMSB_singleport_wport_2_57600_11_16_0_1_0_0_0_1_1_1_0_57600_11_1_gen;

ARCHITECTURE v1 OF ram_Xilinx_ARTIX_7_2_RAMSB_singleport_wport_2_57600_11_16_0_1_0_0_0_1_1_1_0_57600_11_1_gen
    IS
  -- Default Constants

BEGIN
  -- Default Constant Signal Assignments

  we <= (we_d);
  addr <= (addr_d);
  data_in <= (data_in_d);
END v1;

-- ------------------------------------------------------------------
--  Design Unit:    ram_Xilinx_ARTIX_7_2_RAMSB_singleport_rport_1_57600_10_16_0_1_0_0_0_1_1_1_0_57600_10_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.funcs.ALL;
USE mgc_hls.mgc_ioport_comps_v11.ALL;
USE mgc_hls.singleport_ram_be_pkg.ALL;


ENTITY ram_Xilinx_ARTIX_7_2_RAMSB_singleport_rport_1_57600_10_16_0_1_0_0_0_1_1_1_0_57600_10_1_gen
    IS
  PORT(
    data_out : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
    re : OUT STD_LOGIC;
    addr : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
    addr_d : IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    re_d : IN STD_LOGIC;
    data_out_d : OUT STD_LOGIC_VECTOR (9 DOWNTO 0)
  );
END ram_Xilinx_ARTIX_7_2_RAMSB_singleport_rport_1_57600_10_16_0_1_0_0_0_1_1_1_0_57600_10_1_gen;

ARCHITECTURE v1 OF ram_Xilinx_ARTIX_7_2_RAMSB_singleport_rport_1_57600_10_16_0_1_0_0_0_1_1_1_0_57600_10_1_gen
    IS
  -- Default Constants

BEGIN
  -- Default Constant Signal Assignments

  data_out_d <= data_out;
  re <= (re_d);
  addr <= (addr_d);
END v1;

-- ------------------------------------------------------------------
--  Design Unit:    apply_conv_core_core_fsm
--  FSM Module
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.funcs.ALL;
USE mgc_hls.mgc_ioport_comps_v11.ALL;
USE mgc_hls.singleport_ram_be_pkg.ALL;


ENTITY apply_conv_core_core_fsm IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    fsm_output : OUT STD_LOGIC_VECTOR (16 DOWNTO 0);
    PAD_for_for_C_3_tr0 : IN STD_LOGIC;
    PAD_for_C_0_tr0 : IN STD_LOGIC;
    PAD_C_0_tr0 : IN STD_LOGIC;
    CONV_K_W_C_2_tr0 : IN STD_LOGIC;
    CONV_K_H_C_0_tr0 : IN STD_LOGIC;
    CONV_K_D_C_0_tr0 : IN STD_LOGIC;
    CONV_H_SLIDE_C_1_tr0 : IN STD_LOGIC;
    CONV_V_SLIDE_C_0_tr0 : IN STD_LOGIC;
    CONV_NB_K_C_0_tr0 : IN STD_LOGIC
  );
END apply_conv_core_core_fsm;

ARCHITECTURE v1 OF apply_conv_core_core_fsm IS
  -- Default Constants

  -- FSM State Type Declaration for apply_conv_core_core_fsm_1
  TYPE apply_conv_core_core_fsm_1_ST IS (main_C_0, PAD_for_for_C_0, PAD_for_for_C_1,
      PAD_for_for_C_2, PAD_for_for_C_3, PAD_for_C_0, PAD_C_0, CONV_K_W_C_0, CONV_K_W_C_1,
      CONV_K_W_C_2, CONV_K_H_C_0, CONV_K_D_C_0, CONV_H_SLIDE_C_0, CONV_H_SLIDE_C_1,
      CONV_V_SLIDE_C_0, CONV_NB_K_C_0, main_C_1);

  SIGNAL state_var : apply_conv_core_core_fsm_1_ST;
  SIGNAL state_var_NS : apply_conv_core_core_fsm_1_ST;

BEGIN
  -- Default Constant Signal Assignments

  apply_conv_core_core_fsm_1 : PROCESS (PAD_for_for_C_3_tr0, PAD_for_C_0_tr0, PAD_C_0_tr0,
      CONV_K_W_C_2_tr0, CONV_K_H_C_0_tr0, CONV_K_D_C_0_tr0, CONV_H_SLIDE_C_1_tr0,
      CONV_V_SLIDE_C_0_tr0, CONV_NB_K_C_0_tr0, state_var)
  BEGIN
    CASE state_var IS
      WHEN PAD_for_for_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000000000010");
        state_var_NS <= PAD_for_for_C_1;
      WHEN PAD_for_for_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000000000100");
        state_var_NS <= PAD_for_for_C_2;
      WHEN PAD_for_for_C_2 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000000001000");
        state_var_NS <= PAD_for_for_C_3;
      WHEN PAD_for_for_C_3 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000000010000");
        IF ( PAD_for_for_C_3_tr0 = '1' ) THEN
          state_var_NS <= PAD_for_C_0;
        ELSE
          state_var_NS <= PAD_for_for_C_0;
        END IF;
      WHEN PAD_for_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000000100000");
        IF ( PAD_for_C_0_tr0 = '1' ) THEN
          state_var_NS <= PAD_C_0;
        ELSE
          state_var_NS <= PAD_for_for_C_0;
        END IF;
      WHEN PAD_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000001000000");
        IF ( PAD_C_0_tr0 = '1' ) THEN
          state_var_NS <= CONV_K_W_C_0;
        ELSE
          state_var_NS <= PAD_for_for_C_0;
        END IF;
      WHEN CONV_K_W_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000010000000");
        state_var_NS <= CONV_K_W_C_1;
      WHEN CONV_K_W_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000100000000");
        state_var_NS <= CONV_K_W_C_2;
      WHEN CONV_K_W_C_2 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000001000000000");
        IF ( CONV_K_W_C_2_tr0 = '1' ) THEN
          state_var_NS <= CONV_K_H_C_0;
        ELSE
          state_var_NS <= CONV_K_W_C_0;
        END IF;
      WHEN CONV_K_H_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000010000000000");
        IF ( CONV_K_H_C_0_tr0 = '1' ) THEN
          state_var_NS <= CONV_K_D_C_0;
        ELSE
          state_var_NS <= CONV_K_W_C_0;
        END IF;
      WHEN CONV_K_D_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000100000000000");
        IF ( CONV_K_D_C_0_tr0 = '1' ) THEN
          state_var_NS <= CONV_H_SLIDE_C_0;
        ELSE
          state_var_NS <= CONV_K_W_C_0;
        END IF;
      WHEN CONV_H_SLIDE_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00001000000000000");
        state_var_NS <= CONV_H_SLIDE_C_1;
      WHEN CONV_H_SLIDE_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00010000000000000");
        IF ( CONV_H_SLIDE_C_1_tr0 = '1' ) THEN
          state_var_NS <= CONV_V_SLIDE_C_0;
        ELSE
          state_var_NS <= CONV_K_W_C_0;
        END IF;
      WHEN CONV_V_SLIDE_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00100000000000000");
        IF ( CONV_V_SLIDE_C_0_tr0 = '1' ) THEN
          state_var_NS <= CONV_NB_K_C_0;
        ELSE
          state_var_NS <= CONV_K_W_C_0;
        END IF;
      WHEN CONV_NB_K_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01000000000000000");
        IF ( CONV_NB_K_C_0_tr0 = '1' ) THEN
          state_var_NS <= main_C_1;
        ELSE
          state_var_NS <= CONV_K_W_C_0;
        END IF;
      WHEN main_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10000000000000000");
        state_var_NS <= main_C_0;
      -- main_C_0
      WHEN OTHERS =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000000000001");
        state_var_NS <= PAD_for_for_C_0;
    END CASE;
  END PROCESS apply_conv_core_core_fsm_1;

  apply_conv_core_core_fsm_1_REG : PROCESS (clk)
  BEGIN
    IF clk'event AND ( clk = '1' ) THEN
      IF ( rst = '1' ) THEN
        state_var <= main_C_0;
      ELSE
        state_var <= state_var_NS;
      END IF;
    END IF;
  END PROCESS apply_conv_core_core_fsm_1_REG;

END v1;

-- ------------------------------------------------------------------
--  Design Unit:    apply_conv_core
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.funcs.ALL;
USE mgc_hls.mgc_ioport_comps_v11.ALL;
USE mgc_hls.singleport_ram_be_pkg.ALL;


ENTITY apply_conv_core IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    conv_in_rsc_triosy_lz : OUT STD_LOGIC;
    conv_out_rsc_triosy_lz : OUT STD_LOGIC;
    conv_in_rsci_addr_d : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
    conv_in_rsci_re_d : OUT STD_LOGIC;
    conv_in_rsci_data_out_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
    conv_out_rsci_data_in_d : OUT STD_LOGIC_VECTOR (10 DOWNTO 0);
    conv_out_rsci_addr_d : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
    conv_out_rsci_we_d : OUT STD_LOGIC;
    pad_input_rsci_data_in_d : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    pad_input_rsci_addr_d : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
    pad_input_rsci_re_d : OUT STD_LOGIC;
    pad_input_rsci_we_d : OUT STD_LOGIC;
    pad_input_rsci_data_out_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0)
  );
END apply_conv_core;

ARCHITECTURE v1 OF apply_conv_core IS
  -- Default Constants

  -- Interconnect Declarations
  SIGNAL fsm_output : STD_LOGIC_VECTOR (16 DOWNTO 0);
  SIGNAL and_dcpl_4 : STD_LOGIC;
  SIGNAL or_dcpl_16 : STD_LOGIC;
  SIGNAL or_tmp_41 : STD_LOGIC;
  SIGNAL or_tmp_49 : STD_LOGIC;
  SIGNAL o_d_1_0_sva_1 : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL PAD_d_1_0_sva_3 : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL PAD_for_r_6_0_sva_4 : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL PAD_for_for_c_7_0_sva_3 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL PAD_for_for_c_7_0_sva_4 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL o_r_6_0_lpi_4 : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL CONV_V_SLIDE_j_6_0_sva_3 : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL o_c_7_0_lpi_4 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL CONV_H_SLIDE_k_7_0_sva : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL CONV_K_D_l_1_0_sva_3 : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL CONV_K_H_m_1_0_sva_3 : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL temp_1_lpi_7 : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL CONV_K_W_n_1_0_sva : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL temp_1_sva_2 : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL CONV_K_W_n_1_0_sva_3 : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL CONV_H_SLIDE_k_7_0_sva_5 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL PAD_for_for_if_PAD_for_for_if_or_itm : STD_LOGIC;
  SIGNAL PAD_for_for_else_if_PAD_for_for_else_if_or_itm_1 : STD_LOGIC;
  SIGNAL PAD_for_for_c_slc_PAD_for_for_c_7_0_0_1_itm_1 : STD_LOGIC;
  SIGNAL PAD_for_for_else_else_slc_PAD_for_for_else_else_acc_5_psp_4_0_itm_3 : STD_LOGIC_VECTOR
      (4 DOWNTO 0);
  SIGNAL PAD_for_for_c_slc_PAD_for_for_c_7_0_0_2_itm : STD_LOGIC;
  SIGNAL PAD_for_for_slc_PAD_for_for_acc_7_itm : STD_LOGIC;
  SIGNAL CONV_K_W_asn_19_itm_1 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL CONV_K_W_mux_itm_1 : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL CONV_K_W_slc_CONV_K_W_acc_2_itm : STD_LOGIC;
  SIGNAL CONV_H_SLIDE_slc_CONV_H_SLIDE_acc_3_itm_1 : STD_LOGIC;
  SIGNAL CONV_H_SLIDE_acc_5_itm_2 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL PAD_for_for_if_acc_ncse_2 : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL PAD_for_for_else_else_acc_itm_14_1_1 : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL PAD_for_for_else_else_acc_itm_0_2 : STD_LOGIC;
  SIGNAL CONV_K_W_CONV_K_W_conc_4_psp_1_1 : STD_LOGIC;
  SIGNAL CONV_K_W_CONV_K_W_conc_4_psp_0_1 : STD_LOGIC;
  SIGNAL PAD_for_for_else_else_acc_5_psp_sva_2_7_5 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL CONV_K_W_acc_18_sdt_1_2_0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL xor_cse_5 : STD_LOGIC;
  SIGNAL reg_conv_out_rsc_triosy_obj_ld_cse : STD_LOGIC;
  SIGNAL or_13_cse : STD_LOGIC;
  SIGNAL reg_CONV_H_SLIDE_k_7_CONV_H_SLIDE_k_or_cse : STD_LOGIC;
  SIGNAL reg_CONV_V_SLIDE_j_6_CONV_V_SLIDE_j_or_cse : STD_LOGIC;
  SIGNAL reg_CONV_NB_K_i_1_CONV_NB_K_i_or_cse : STD_LOGIC;
  SIGNAL reg_PAD_d_1_PAD_d_or_cse : STD_LOGIC;
  SIGNAL CONV_H_SLIDE_acc_14_sdt : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL PAD_for_for_if_acc_ncse : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL CONV_K_W_acc_15_sdt : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL PAD_for_for_if_acc_3_ncse : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL z_out : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL z_out_1 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL z_out_2 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL z_out_3 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL z_out_4 : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL z_out_5 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL z_out_6 : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL PAD_for_for_else_else_acc_5_psp_sva : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL CONV_V_SLIDE_j_6_0_sva_1 : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL CONV_K_W_acc_18_sdt : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL CONV_H_SLIDE_k_7_0_sva_1 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL CONV_NB_K_i_1_0_sva_1_1 : STD_LOGIC;
  SIGNAL CONV_NB_K_i_1_0_sva_4_1 : STD_LOGIC;
  SIGNAL CONV_NB_K_i_1_0_sva_4_0 : STD_LOGIC;
  SIGNAL CONV_K_W_or_2_ssc : STD_LOGIC;
  SIGNAL reg_PAD_for_for_if_acc_3_ncse_cse : STD_LOGIC;
  SIGNAL CONV_K_W_CONV_K_W_or_cse : STD_LOGIC;
  SIGNAL CONV_K_W_or_ssc : STD_LOGIC;

  SIGNAL PAD_for_for_c_nor_nl : STD_LOGIC;
  SIGNAL PAD_d_not_nl : STD_LOGIC;
  SIGNAL PAD_for_for_acc_1_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL or_nl : STD_LOGIC;
  SIGNAL PAD_for_for_else_acc_nl : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL PAD_for_for_else_oif_acc_nl : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL temp_mux_nl : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL not_nl : STD_LOGIC;
  SIGNAL CONV_K_W_asn_pref_pref_pref_4_6_CONV_K_W_acc_nl : STD_LOGIC_VECTOR (6 DOWNTO
      0);
  SIGNAL CONV_H_SLIDE_acc_nl : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL PAD_for_for_if_PAD_for_for_if_mul_nl : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL CONV_K_W_acc_21_nl : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL CONV_K_W_acc_16_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL CONV_K_W_mul_nl : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL CONV_K_W_acc_1_nl : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL CONV_H_SLIDE_mux_nl : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL CONV_H_SLIDE_and_nl : STD_LOGIC;
  SIGNAL CONV_H_SLIDE_else_if_acc_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL CONV_H_SLIDE_not_2_nl : STD_LOGIC;
  SIGNAL pad_input_mux1h_nl : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL CONV_K_W_acc_22_nl : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL pad_input_mux1h_1_nl : STD_LOGIC;
  SIGNAL pad_input_mux1h_2_nl : STD_LOGIC;
  SIGNAL CONV_NB_K_mux1h_2_nl : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL PAD_for_for_mux_2_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL PAD_for_for_mux_3_nl : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL CONV_K_W_mux_5_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL CONV_K_W_mux_6_nl : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL CONV_V_SLIDE_CONV_V_SLIDE_mux_1_nl : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL CONV_V_SLIDE_or_2_nl : STD_LOGIC;
  SIGNAL CONV_V_SLIDE_nor_1_nl : STD_LOGIC;
  SIGNAL CONV_V_SLIDE_mux1h_2_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL CONV_V_SLIDE_or_3_nl : STD_LOGIC;
  SIGNAL CONV_K_W_mux1h_2_nl : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL CONV_K_W_or_3_nl : STD_LOGIC;
  SIGNAL CONV_K_W_nor_3_nl : STD_LOGIC;
  SIGNAL CONV_K_W_CONV_K_W_mux_1_nl : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL CONV_H_SLIDE_mux_3_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL CONV_K_W_mux_7_nl : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL PAD_for_for_else_else_acc_17_nl : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL CONV_K_W_mux_8_nl : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL CONV_K_W_mul_13_nl : STD_LOGIC_VECTOR (10 DOWNTO 0);
  COMPONENT apply_conv_core_core_fsm
    PORT(
      clk : IN STD_LOGIC;
      rst : IN STD_LOGIC;
      fsm_output : OUT STD_LOGIC_VECTOR (16 DOWNTO 0);
      PAD_for_for_C_3_tr0 : IN STD_LOGIC;
      PAD_for_C_0_tr0 : IN STD_LOGIC;
      PAD_C_0_tr0 : IN STD_LOGIC;
      CONV_K_W_C_2_tr0 : IN STD_LOGIC;
      CONV_K_H_C_0_tr0 : IN STD_LOGIC;
      CONV_K_D_C_0_tr0 : IN STD_LOGIC;
      CONV_H_SLIDE_C_1_tr0 : IN STD_LOGIC;
      CONV_V_SLIDE_C_0_tr0 : IN STD_LOGIC;
      CONV_NB_K_C_0_tr0 : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL apply_conv_core_core_fsm_inst_fsm_output : STD_LOGIC_VECTOR (16 DOWNTO 0);
  SIGNAL apply_conv_core_core_fsm_inst_PAD_for_for_C_3_tr0 : STD_LOGIC;
  SIGNAL apply_conv_core_core_fsm_inst_PAD_for_C_0_tr0 : STD_LOGIC;
  SIGNAL apply_conv_core_core_fsm_inst_PAD_C_0_tr0 : STD_LOGIC;
  SIGNAL apply_conv_core_core_fsm_inst_CONV_K_W_C_2_tr0 : STD_LOGIC;
  SIGNAL apply_conv_core_core_fsm_inst_CONV_K_H_C_0_tr0 : STD_LOGIC;
  SIGNAL apply_conv_core_core_fsm_inst_CONV_K_D_C_0_tr0 : STD_LOGIC;
  SIGNAL apply_conv_core_core_fsm_inst_CONV_H_SLIDE_C_1_tr0 : STD_LOGIC;
  SIGNAL apply_conv_core_core_fsm_inst_CONV_V_SLIDE_C_0_tr0 : STD_LOGIC;
  SIGNAL apply_conv_core_core_fsm_inst_CONV_NB_K_C_0_tr0 : STD_LOGIC;

  FUNCTION MUX1HOT_s_1_4_2(input_3 : STD_LOGIC;
  input_2 : STD_LOGIC;
  input_1 : STD_LOGIC;
  input_0 : STD_LOGIC;
  sel : STD_LOGIC_VECTOR(3 DOWNTO 0))
  RETURN STD_LOGIC IS
    VARIABLE result : STD_LOGIC;
    VARIABLE tmp : STD_LOGIC;

    BEGIN
      tmp := sel(0);
      result := input_0 and tmp;
      tmp := sel(1);
      result := result or ( input_1 and tmp);
      tmp := sel(2);
      result := result or ( input_2 and tmp);
      tmp := sel(3);
      result := result or ( input_3 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_14_4_2(input_3 : STD_LOGIC_VECTOR(13 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(13 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(13 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(13 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(3 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(13 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(13 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_2_4_2(input_3 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(3 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(1 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(1 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_2_5_2(input_4 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  input_3 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(4 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(1 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(1 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
      tmp := (OTHERS=>sel( 4));
      result := result or ( input_4 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_3_3_2(input_2 : STD_LOGIC_VECTOR(2 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(2 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(2 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(2 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(2 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX_s_1_2_2(input_0 : STD_LOGIC;
  input_1 : STD_LOGIC;
  sel : STD_LOGIC)
  RETURN STD_LOGIC IS
    VARIABLE result : STD_LOGIC;
    VARIABLE tmp : STD_LOGIC;

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_10_2_2(input_0 : STD_LOGIC_VECTOR(9 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(9 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(9 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(9 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_11_2_2(input_0 : STD_LOGIC_VECTOR(10 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(10 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(10 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(10 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_2_2_2(input_0 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(1 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(1 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_4_81_2(input_0 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_3 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_4 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_5 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_6 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_7 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_8 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_9 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_10 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_11 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_12 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_13 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_14 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_15 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_16 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_17 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_18 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_19 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_20 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_21 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_22 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_23 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_24 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_25 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_26 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_27 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_28 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_29 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_30 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_31 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_32 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_33 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_34 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_35 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_36 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_37 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_38 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_39 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_40 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_41 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_42 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_43 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_44 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_45 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_46 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_47 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_48 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_49 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_50 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_51 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_52 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_53 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_54 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_55 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_56 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_57 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_58 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_59 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_60 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_61 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_62 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_63 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_64 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_65 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_66 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_67 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_68 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_69 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_70 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_71 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_72 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_73 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_74 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_75 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_76 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_77 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_78 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_79 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_80 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(6 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(3 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(3 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN "0000000" =>
          result := input_0;
        WHEN "0000001" =>
          result := input_1;
        WHEN "0000010" =>
          result := input_2;
        WHEN "0000011" =>
          result := input_3;
        WHEN "0000100" =>
          result := input_4;
        WHEN "0000101" =>
          result := input_5;
        WHEN "0000110" =>
          result := input_6;
        WHEN "0000111" =>
          result := input_7;
        WHEN "0001000" =>
          result := input_8;
        WHEN "0001001" =>
          result := input_9;
        WHEN "0001010" =>
          result := input_10;
        WHEN "0001011" =>
          result := input_11;
        WHEN "0001100" =>
          result := input_12;
        WHEN "0001101" =>
          result := input_13;
        WHEN "0001110" =>
          result := input_14;
        WHEN "0001111" =>
          result := input_15;
        WHEN "0010000" =>
          result := input_16;
        WHEN "0010001" =>
          result := input_17;
        WHEN "0010010" =>
          result := input_18;
        WHEN "0010011" =>
          result := input_19;
        WHEN "0010100" =>
          result := input_20;
        WHEN "0010101" =>
          result := input_21;
        WHEN "0010110" =>
          result := input_22;
        WHEN "0010111" =>
          result := input_23;
        WHEN "0011000" =>
          result := input_24;
        WHEN "0011001" =>
          result := input_25;
        WHEN "0011010" =>
          result := input_26;
        WHEN "0011011" =>
          result := input_27;
        WHEN "0011100" =>
          result := input_28;
        WHEN "0011101" =>
          result := input_29;
        WHEN "0011110" =>
          result := input_30;
        WHEN "0011111" =>
          result := input_31;
        WHEN "0100000" =>
          result := input_32;
        WHEN "0100001" =>
          result := input_33;
        WHEN "0100010" =>
          result := input_34;
        WHEN "0100011" =>
          result := input_35;
        WHEN "0100100" =>
          result := input_36;
        WHEN "0100101" =>
          result := input_37;
        WHEN "0100110" =>
          result := input_38;
        WHEN "0100111" =>
          result := input_39;
        WHEN "0101000" =>
          result := input_40;
        WHEN "0101001" =>
          result := input_41;
        WHEN "0101010" =>
          result := input_42;
        WHEN "0101011" =>
          result := input_43;
        WHEN "0101100" =>
          result := input_44;
        WHEN "0101101" =>
          result := input_45;
        WHEN "0101110" =>
          result := input_46;
        WHEN "0101111" =>
          result := input_47;
        WHEN "0110000" =>
          result := input_48;
        WHEN "0110001" =>
          result := input_49;
        WHEN "0110010" =>
          result := input_50;
        WHEN "0110011" =>
          result := input_51;
        WHEN "0110100" =>
          result := input_52;
        WHEN "0110101" =>
          result := input_53;
        WHEN "0110110" =>
          result := input_54;
        WHEN "0110111" =>
          result := input_55;
        WHEN "0111000" =>
          result := input_56;
        WHEN "0111001" =>
          result := input_57;
        WHEN "0111010" =>
          result := input_58;
        WHEN "0111011" =>
          result := input_59;
        WHEN "0111100" =>
          result := input_60;
        WHEN "0111101" =>
          result := input_61;
        WHEN "0111110" =>
          result := input_62;
        WHEN "0111111" =>
          result := input_63;
        WHEN "1000000" =>
          result := input_64;
        WHEN "1000001" =>
          result := input_65;
        WHEN "1000010" =>
          result := input_66;
        WHEN "1000011" =>
          result := input_67;
        WHEN "1000100" =>
          result := input_68;
        WHEN "1000101" =>
          result := input_69;
        WHEN "1000110" =>
          result := input_70;
        WHEN "1000111" =>
          result := input_71;
        WHEN "1001000" =>
          result := input_72;
        WHEN "1001001" =>
          result := input_73;
        WHEN "1001010" =>
          result := input_74;
        WHEN "1001011" =>
          result := input_75;
        WHEN "1001100" =>
          result := input_76;
        WHEN "1001101" =>
          result := input_77;
        WHEN "1001110" =>
          result := input_78;
        WHEN "1001111" =>
          result := input_79;
        WHEN others =>
          result := input_80;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_7_2_2(input_0 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(6 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(6 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_8_2_2(input_0 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(7 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(7 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

BEGIN
  -- Default Constant Signal Assignments

  conv_in_rsc_triosy_obj : mgc_hls.mgc_ioport_comps_v11.mgc_io_sync_v1
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_conv_out_rsc_triosy_obj_ld_cse,
      lz => conv_in_rsc_triosy_lz
    );
  conv_out_rsc_triosy_obj : mgc_hls.mgc_ioport_comps_v11.mgc_io_sync_v1
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_conv_out_rsc_triosy_obj_ld_cse,
      lz => conv_out_rsc_triosy_lz
    );
  apply_conv_core_core_fsm_inst : apply_conv_core_core_fsm
    PORT MAP(
      clk => clk,
      rst => rst,
      fsm_output => apply_conv_core_core_fsm_inst_fsm_output,
      PAD_for_for_C_3_tr0 => apply_conv_core_core_fsm_inst_PAD_for_for_C_3_tr0,
      PAD_for_C_0_tr0 => apply_conv_core_core_fsm_inst_PAD_for_C_0_tr0,
      PAD_C_0_tr0 => apply_conv_core_core_fsm_inst_PAD_C_0_tr0,
      CONV_K_W_C_2_tr0 => apply_conv_core_core_fsm_inst_CONV_K_W_C_2_tr0,
      CONV_K_H_C_0_tr0 => apply_conv_core_core_fsm_inst_CONV_K_H_C_0_tr0,
      CONV_K_D_C_0_tr0 => apply_conv_core_core_fsm_inst_CONV_K_D_C_0_tr0,
      CONV_H_SLIDE_C_1_tr0 => apply_conv_core_core_fsm_inst_CONV_H_SLIDE_C_1_tr0,
      CONV_V_SLIDE_C_0_tr0 => apply_conv_core_core_fsm_inst_CONV_V_SLIDE_C_0_tr0,
      CONV_NB_K_C_0_tr0 => apply_conv_core_core_fsm_inst_CONV_NB_K_C_0_tr0
    );
  fsm_output <= apply_conv_core_core_fsm_inst_fsm_output;
  apply_conv_core_core_fsm_inst_PAD_for_for_C_3_tr0 <= NOT PAD_for_for_slc_PAD_for_for_acc_7_itm;
  apply_conv_core_core_fsm_inst_PAD_for_C_0_tr0 <= NOT (readindex(STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(z_out_3(6
      DOWNTO 1)), 6), 7) + SIGNED'( "1000011"), 7)), 6));
  apply_conv_core_core_fsm_inst_PAD_C_0_tr0 <= NOT((z_out(0)) XOR (z_out(1)));
  apply_conv_core_core_fsm_inst_CONV_K_W_C_2_tr0 <= NOT CONV_K_W_slc_CONV_K_W_acc_2_itm;
  apply_conv_core_core_fsm_inst_CONV_K_H_C_0_tr0 <= NOT((z_out(0)) XOR (z_out(1)));
  apply_conv_core_core_fsm_inst_CONV_K_D_C_0_tr0 <= NOT((z_out(0)) XOR (z_out(1)));
  apply_conv_core_core_fsm_inst_CONV_H_SLIDE_C_1_tr0 <= CONV_H_SLIDE_slc_CONV_H_SLIDE_acc_3_itm_1;
  apply_conv_core_core_fsm_inst_CONV_V_SLIDE_C_0_tr0 <= readindex(STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED('1'
      & (NOT (CONV_V_SLIDE_j_6_0_sva_1(6 DOWNTO 3)))) + SIGNED'( "01111"), 5)), 4);
  apply_conv_core_core_fsm_inst_CONV_NB_K_C_0_tr0 <= NOT xor_cse_5;

  reg_PAD_d_1_PAD_d_or_cse <= (fsm_output(0)) OR (fsm_output(6));
  PAD_for_for_acc_1_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(PAD_for_r_6_0_sva_4),
      7), 8) + SIGNED'( "11111111"), 8));
  or_13_cse <= (readindex(STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(PAD_for_for_acc_1_nl),
      8)), 7)) OR (NOT (z_out_2(7)));
  reg_CONV_NB_K_i_1_CONV_NB_K_i_or_cse <= (fsm_output(6)) OR (fsm_output(15));
  reg_CONV_V_SLIDE_j_6_CONV_V_SLIDE_j_or_cse <= reg_CONV_NB_K_i_1_CONV_NB_K_i_or_cse
      OR (fsm_output(14));
  reg_CONV_H_SLIDE_k_7_CONV_H_SLIDE_k_or_cse <= (fsm_output(14)) OR (fsm_output(15))
      OR (fsm_output(6)) OR (fsm_output(13));
  PAD_for_for_if_acc_ncse <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(PAD_for_for_if_acc_3_ncse(13
      DOWNTO 1)), 13), 14) + UNSIGNED(z_out_4), 14));
  PAD_for_for_if_PAD_for_for_if_mul_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'(
      UNSIGNED(PAD_for_r_6_0_sva_4) * UNSIGNED'( "1010001")), 14));
  PAD_for_for_if_acc_3_ncse <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(PAD_for_for_if_PAD_for_for_if_mul_nl),
      14) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(PAD_for_for_c_7_0_sva_3(7 DOWNTO
      1)), 7), 14), 14));
  PAD_for_for_else_else_acc_5_psp_sva <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(PAD_for_for_c_7_0_sva_3)
      + UNSIGNED'( "11111111"), 8));
  CONV_NB_K_i_1_0_sva_1_1 <= CONV_NB_K_i_1_0_sva_4_0 XOR CONV_NB_K_i_1_0_sva_4_1;
  CONV_V_SLIDE_j_6_0_sva_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(CONV_V_SLIDE_j_6_0_sva_3)
      + UNSIGNED'( "0000001"), 7));
  CONV_K_W_acc_21_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(CONV_K_H_m_1_0_sva_3)
      + CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(CONV_K_D_l_1_0_sva_3(1), 1), 1),
      2), 2));
  CONV_K_W_acc_16_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(CONV_K_H_m_1_0_sva_3),
      2), 3) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(CONV_K_W_n_1_0_sva), 2), 3),
      3));
  CONV_K_W_acc_18_sdt <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(CONV_K_W_acc_21_nl),
      2)) & (CONV_K_D_l_1_0_sva_3(0))), 3), 4) + CONV_UNSIGNED(UNSIGNED(CONV_K_W_acc_16_nl),
      4), 4));
  CONV_K_W_acc_1_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(CONV_V_SLIDE_j_6_0_sva_3)
      + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(CONV_K_H_m_1_0_sva_3), 2), 7), 7));
  CONV_K_W_mul_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( CONV_UNSIGNED(UNSIGNED(CONV_K_W_acc_1_nl),
      7) * UNSIGNED'( "1010001")), 14));
  CONV_K_W_acc_15_sdt <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(CONV_K_W_mul_nl),
      14) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(z_out_2(7 DOWNTO 1)), 7), 14), 14));
  CONV_H_SLIDE_k_7_0_sva_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(CONV_H_SLIDE_k_7_0_sva)
      + UNSIGNED'( "00000001"), 8));
  CONV_H_SLIDE_acc_14_sdt <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(o_r_6_0_lpi_4),
      7), 8) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(z_out_3(6 DOWNTO 2)), 5), 8),
      8));
  and_dcpl_4 <= NOT(PAD_for_for_if_PAD_for_for_if_or_itm OR PAD_for_for_else_if_PAD_for_for_else_if_or_itm_1);
  or_dcpl_16 <= TO_STDLOGIC(fsm_output(14 DOWNTO 13)/=STD_LOGIC_VECTOR'("00"));
  or_tmp_41 <= or_dcpl_16 OR reg_CONV_NB_K_i_1_CONV_NB_K_i_or_cse;
  or_tmp_49 <= TO_STDLOGIC(fsm_output(11 DOWNTO 10)/=STD_LOGIC_VECTOR'("00"));
  xor_cse_5 <= NOT(CONV_NB_K_i_1_0_sva_4_0 XOR CONV_NB_K_i_1_0_sva_1_1);
  conv_in_rsci_addr_d <= z_out_6 & PAD_for_for_else_else_slc_PAD_for_for_else_else_acc_5_psp_4_0_itm_3;
  conv_in_rsci_re_d <= NOT(and_dcpl_4 AND (fsm_output(2)));
  CONV_H_SLIDE_else_if_acc_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED('1' & (NOT (temp_1_sva_2(9
      DOWNTO 8)))) + SIGNED'( "001"), 3));
  CONV_H_SLIDE_and_nl <= (readindex(STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(CONV_H_SLIDE_else_if_acc_nl),
      3)), 2)) AND (NOT (temp_1_sva_2(10)));
  CONV_H_SLIDE_mux_nl <= MUX_v_11_2_2(temp_1_sva_2, STD_LOGIC_VECTOR'( "00011111111"),
      CONV_H_SLIDE_and_nl);
  CONV_H_SLIDE_not_2_nl <= NOT (temp_1_sva_2(10));
  conv_out_rsci_data_in_d <= MUX_v_11_2_2(STD_LOGIC_VECTOR'("00000000000"), CONV_H_SLIDE_mux_nl,
      CONV_H_SLIDE_not_2_nl);
  conv_out_rsci_addr_d <= z_out_1 & (CONV_H_SLIDE_acc_14_sdt(0)) & (z_out_3(1 DOWNTO
      0)) & (o_c_7_0_lpi_4(4 DOWNTO 0));
  conv_out_rsci_we_d <= NOT (fsm_output(12));
  pad_input_rsci_data_in_d <= MUX_v_10_2_2(STD_LOGIC_VECTOR'("0000000000"), conv_in_rsci_data_out_d,
      (fsm_output(3)));
  CONV_K_W_acc_22_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(CONV_K_W_acc_15_sdt(13
      DOWNTO 1)), 13), 14) + UNSIGNED(z_out_4), 14));
  pad_input_mux1h_nl <= MUX1HOT_v_14_4_2(PAD_for_for_if_acc_ncse, PAD_for_for_if_acc_ncse_2,
      PAD_for_for_else_else_acc_itm_14_1_1, STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(CONV_K_W_acc_22_nl),
      14)), STD_LOGIC_VECTOR'( (fsm_output(1)) & (fsm_output(2)) & (fsm_output(3))
      & (fsm_output(7))));
  pad_input_mux1h_1_nl <= MUX1HOT_s_1_4_2((PAD_for_for_if_acc_3_ncse(0)), reg_PAD_for_for_if_acc_3_ncse_cse,
      PAD_for_for_else_else_acc_itm_0_2, (CONV_K_W_acc_15_sdt(0)), STD_LOGIC_VECTOR'(
      (fsm_output(1)) & (fsm_output(2)) & (fsm_output(3)) & (fsm_output(7))));
  pad_input_mux1h_2_nl <= MUX1HOT_s_1_4_2((PAD_for_for_c_7_0_sva_3(0)), PAD_for_for_c_slc_PAD_for_for_c_7_0_0_1_itm_1,
      PAD_for_for_c_slc_PAD_for_for_c_7_0_0_2_itm, (z_out_2(0)), STD_LOGIC_VECTOR'(
      (fsm_output(1)) & (fsm_output(2)) & (fsm_output(3)) & (fsm_output(7))));
  pad_input_rsci_addr_d <= pad_input_mux1h_nl & pad_input_mux1h_1_nl & pad_input_mux1h_2_nl;
  pad_input_rsci_re_d <= NOT (fsm_output(7));
  pad_input_rsci_we_d <= NOT((and_dcpl_4 AND (fsm_output(3))) OR (or_13_cse AND (fsm_output(1)))
      OR ((NOT PAD_for_for_if_PAD_for_for_if_or_itm) AND PAD_for_for_else_if_PAD_for_for_else_if_or_itm_1
      AND (fsm_output(2))));
  CONV_K_W_or_2_ssc <= (fsm_output(2)) OR (fsm_output(12));
  CONV_K_W_CONV_K_W_or_cse <= NOT((fsm_output(8)) OR CONV_K_W_or_2_ssc);
  CONV_K_W_or_ssc <= (fsm_output(1)) OR (fsm_output(7));
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        PAD_for_for_c_7_0_sva_3 <= STD_LOGIC_VECTOR'( "00000000");
        reg_conv_out_rsc_triosy_obj_ld_cse <= '0';
        PAD_for_for_if_acc_ncse_2 <= STD_LOGIC_VECTOR'( "00000000000000");
        reg_PAD_for_for_if_acc_3_ncse_cse <= '0';
        PAD_for_for_c_slc_PAD_for_for_c_7_0_0_1_itm_1 <= '0';
        PAD_for_for_c_slc_PAD_for_for_c_7_0_0_2_itm <= '0';
        PAD_for_for_else_else_slc_PAD_for_for_else_else_acc_5_psp_4_0_itm_3 <= STD_LOGIC_VECTOR'(
            "00000");
        PAD_for_for_else_else_acc_5_psp_sva_2_7_5 <= STD_LOGIC_VECTOR'( "000");
        PAD_for_for_else_if_PAD_for_for_else_if_or_itm_1 <= '0';
        PAD_for_for_else_else_acc_itm_14_1_1 <= STD_LOGIC_VECTOR'( "00000000000000");
        PAD_for_for_else_else_acc_itm_0_2 <= '0';
        CONV_K_W_n_1_0_sva <= STD_LOGIC_VECTOR'( "00");
        CONV_K_W_CONV_K_W_conc_4_psp_1_1 <= '0';
        CONV_K_W_CONV_K_W_conc_4_psp_0_1 <= '0';
        CONV_K_W_acc_18_sdt_1_2_0 <= STD_LOGIC_VECTOR'( "000");
        CONV_K_W_asn_19_itm_1 <= STD_LOGIC_VECTOR'( "0000000000");
        CONV_K_W_mux_itm_1 <= STD_LOGIC_VECTOR'( "0000");
        CONV_H_SLIDE_slc_CONV_H_SLIDE_acc_3_itm_1 <= '0';
        CONV_H_SLIDE_k_7_0_sva_5 <= STD_LOGIC_VECTOR'( "00000000");
        CONV_H_SLIDE_acc_5_itm_2 <= STD_LOGIC_VECTOR'( "00000000");
      ELSE
        PAD_for_for_c_7_0_sva_3 <= MUX_v_8_2_2(STD_LOGIC_VECTOR'("00000000"), PAD_for_for_c_7_0_sva_4,
            PAD_for_for_c_nor_nl);
        reg_conv_out_rsc_triosy_obj_ld_cse <= (NOT xor_cse_5) AND (fsm_output(15));
        PAD_for_for_if_acc_ncse_2 <= PAD_for_for_if_acc_ncse;
        reg_PAD_for_for_if_acc_3_ncse_cse <= PAD_for_for_if_acc_3_ncse(0);
        PAD_for_for_c_slc_PAD_for_for_c_7_0_0_1_itm_1 <= PAD_for_for_c_7_0_sva_3(0);
        PAD_for_for_c_slc_PAD_for_for_c_7_0_0_2_itm <= MUX_s_1_2_2((PAD_for_for_c_7_0_sva_3(0)),
            PAD_for_for_c_slc_PAD_for_for_c_7_0_0_2_itm, fsm_output(2));
        PAD_for_for_else_else_slc_PAD_for_for_else_else_acc_5_psp_4_0_itm_3 <= PAD_for_for_else_else_acc_5_psp_sva(4
            DOWNTO 0);
        PAD_for_for_else_else_acc_5_psp_sva_2_7_5 <= PAD_for_for_else_else_acc_5_psp_sva(7
            DOWNTO 5);
        PAD_for_for_else_if_PAD_for_for_else_if_or_itm_1 <= MUX_s_1_2_2(or_nl, PAD_for_for_else_if_PAD_for_for_else_if_or_itm_1,
            fsm_output(2));
        PAD_for_for_else_else_acc_itm_14_1_1 <= PAD_for_for_if_acc_ncse_2;
        PAD_for_for_else_else_acc_itm_0_2 <= reg_PAD_for_for_if_acc_3_ncse_cse;
        CONV_K_W_n_1_0_sva <= MUX_v_2_2_2(STD_LOGIC_VECTOR'("00"), CONV_K_W_n_1_0_sva_3,
            (fsm_output(9)));
        CONV_K_W_CONV_K_W_conc_4_psp_1_1 <= ((CONV_K_D_l_1_0_sva_3(0)) AND (CONV_K_W_acc_18_sdt(3)))
            XOR (CONV_K_D_l_1_0_sva_3(1));
        CONV_K_W_CONV_K_W_conc_4_psp_0_1 <= (CONV_K_D_l_1_0_sva_3(0)) XOR (CONV_K_W_acc_18_sdt(3));
        CONV_K_W_acc_18_sdt_1_2_0 <= CONV_K_W_acc_18_sdt(2 DOWNTO 0);
        CONV_K_W_asn_19_itm_1 <= pad_input_rsci_data_out_d;
        CONV_K_W_mux_itm_1 <= MUX_v_4_81_2(STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "1111"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "1111"), STD_LOGIC_VECTOR'(
            "0101"), STD_LOGIC_VECTOR'( "1111"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "1111"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "1111"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "1111"), STD_LOGIC_VECTOR'(
            "0101"), STD_LOGIC_VECTOR'( "1111"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "1111"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "1111"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "1111"), STD_LOGIC_VECTOR'(
            "0101"), STD_LOGIC_VECTOR'( "1111"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "1111"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(CONV_K_W_asn_pref_pref_pref_4_6_CONV_K_W_acc_nl),
            7)));
        CONV_H_SLIDE_slc_CONV_H_SLIDE_acc_3_itm_1 <= readindex(STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(CONV_H_SLIDE_acc_nl),
            4)), 3);
        CONV_H_SLIDE_k_7_0_sva_5 <= CONV_H_SLIDE_k_7_0_sva_1;
        CONV_H_SLIDE_acc_5_itm_2 <= z_out_5;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        PAD_for_r_6_0_sva_4 <= STD_LOGIC_VECTOR'( "0000000");
      ELSIF ( ((fsm_output(5)) OR reg_PAD_d_1_PAD_d_or_cse) = '1' ) THEN
        PAD_for_r_6_0_sva_4 <= MUX_v_7_2_2(STD_LOGIC_VECTOR'("0000000"), (z_out_3(6
            DOWNTO 0)), PAD_d_not_nl);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        PAD_d_1_0_sva_3 <= STD_LOGIC_VECTOR'( "00");
      ELSIF ( reg_PAD_d_1_PAD_d_or_cse = '1' ) THEN
        PAD_d_1_0_sva_3 <= MUX_v_2_2_2(STD_LOGIC_VECTOR'("00"), z_out, (fsm_output(6)));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        o_d_1_0_sva_1 <= STD_LOGIC_VECTOR'( "00");
      ELSIF ( ((fsm_output(0)) OR (fsm_output(15))) = '1' ) THEN
        o_d_1_0_sva_1 <= MUX_v_2_2_2(STD_LOGIC_VECTOR'("00"), z_out, (fsm_output(15)));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        PAD_for_for_slc_PAD_for_for_acc_7_itm <= '0';
      ELSIF ( (fsm_output(1)) = '1' ) THEN
        PAD_for_for_slc_PAD_for_for_acc_7_itm <= z_out_1(7);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        PAD_for_for_if_PAD_for_for_if_or_itm <= '0';
      ELSIF ( (fsm_output(1)) = '1' ) THEN
        PAD_for_for_if_PAD_for_for_if_or_itm <= or_13_cse;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        PAD_for_for_c_7_0_sva_4 <= STD_LOGIC_VECTOR'( "00000000");
      ELSIF ( (fsm_output(1)) = '1' ) THEN
        PAD_for_for_c_7_0_sva_4 <= z_out_5;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        CONV_NB_K_i_1_0_sva_4_1 <= '0';
        CONV_NB_K_i_1_0_sva_4_0 <= '0';
      ELSIF ( reg_CONV_NB_K_i_1_CONV_NB_K_i_or_cse = '1' ) THEN
        CONV_NB_K_i_1_0_sva_4_1 <= CONV_NB_K_i_1_0_sva_1_1 AND (fsm_output(15));
        CONV_NB_K_i_1_0_sva_4_0 <= (NOT CONV_NB_K_i_1_0_sva_4_0) AND (fsm_output(15));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        CONV_V_SLIDE_j_6_0_sva_3 <= STD_LOGIC_VECTOR'( "0000000");
        o_r_6_0_lpi_4 <= STD_LOGIC_VECTOR'( "0000000");
      ELSIF ( reg_CONV_V_SLIDE_j_6_CONV_V_SLIDE_j_or_cse = '1' ) THEN
        CONV_V_SLIDE_j_6_0_sva_3 <= MUX_v_7_2_2(STD_LOGIC_VECTOR'("0000000"), CONV_V_SLIDE_j_6_0_sva_1,
            (fsm_output(14)));
        o_r_6_0_lpi_4 <= MUX_v_7_2_2(STD_LOGIC_VECTOR'("0000000"), (z_out_3(6 DOWNTO
            0)), (fsm_output(14)));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        CONV_H_SLIDE_k_7_0_sva <= STD_LOGIC_VECTOR'( "00000000");
        o_c_7_0_lpi_4 <= STD_LOGIC_VECTOR'( "00000000");
      ELSIF ( reg_CONV_H_SLIDE_k_7_CONV_H_SLIDE_k_or_cse = '1' ) THEN
        CONV_H_SLIDE_k_7_0_sva <= MUX_v_8_2_2(STD_LOGIC_VECTOR'("00000000"), CONV_H_SLIDE_k_7_0_sva_5,
            (fsm_output(13)));
        o_c_7_0_lpi_4 <= MUX_v_8_2_2(STD_LOGIC_VECTOR'("00000000"), CONV_H_SLIDE_acc_5_itm_2,
            (fsm_output(13)));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        CONV_K_D_l_1_0_sva_3 <= STD_LOGIC_VECTOR'( "00");
      ELSIF ( (or_tmp_41 OR (fsm_output(11))) = '1' ) THEN
        CONV_K_D_l_1_0_sva_3 <= MUX_v_2_2_2(STD_LOGIC_VECTOR'("00"), z_out, (fsm_output(11)));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        CONV_K_H_m_1_0_sva_3 <= STD_LOGIC_VECTOR'( "00");
      ELSIF ( (or_dcpl_16 OR (fsm_output(11)) OR reg_CONV_NB_K_i_1_CONV_NB_K_i_or_cse
          OR (fsm_output(10))) = '1' ) THEN
        CONV_K_H_m_1_0_sva_3 <= MUX_v_2_2_2(STD_LOGIC_VECTOR'("00"), z_out, (fsm_output(10)));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        temp_1_lpi_7 <= STD_LOGIC_VECTOR'( "00000000000");
      ELSIF ( (or_tmp_41 OR (fsm_output(9)) OR or_tmp_49) = '1' ) THEN
        temp_1_lpi_7 <= MUX_v_11_2_2(STD_LOGIC_VECTOR'("00000000000"), temp_mux_nl,
            not_nl);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        CONV_K_W_slc_CONV_K_W_acc_2_itm <= '0';
      ELSIF ( (fsm_output(7)) = '1' ) THEN
        CONV_K_W_slc_CONV_K_W_acc_2_itm <= (z_out(0)) XOR (z_out(1));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        CONV_K_W_n_1_0_sva_3 <= STD_LOGIC_VECTOR'( "00");
      ELSIF ( (fsm_output(7)) = '1' ) THEN
        CONV_K_W_n_1_0_sva_3 <= z_out;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        temp_1_sva_2 <= STD_LOGIC_VECTOR'( "00000000000");
      ELSIF ( or_tmp_49 = '0' ) THEN
        temp_1_sva_2 <= z_out_6;
      END IF;
    END IF;
  END PROCESS;
  PAD_for_for_c_nor_nl <= NOT((fsm_output(5)) OR (fsm_output(0)) OR (fsm_output(6)));
  PAD_for_for_else_acc_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(PAD_for_for_c_7_0_sva_3),
      8), 9) + SIGNED'( "111111111"), 9));
  PAD_for_for_else_oif_acc_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(PAD_for_for_c_7_0_sva_3),
      8), 9) + SIGNED'( "101011111"), 9));
  or_nl <= (readindex(STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(PAD_for_for_else_acc_nl),
      9)), 8)) OR (NOT (readindex(STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(PAD_for_for_else_oif_acc_nl),
      9)), 8)));
  CONV_K_W_asn_pref_pref_pref_4_6_CONV_K_W_acc_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(CONV_K_W_CONV_K_W_conc_4_psp_1_1
      & CONV_K_W_CONV_K_W_conc_4_psp_0_1 & CONV_K_W_acc_18_sdt_1_2_0), 5), 7) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(z_out_4(5
      DOWNTO 0)), 6), 7), 7));
  CONV_H_SLIDE_acc_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED('1' & (NOT (CONV_H_SLIDE_k_7_0_sva_1(7
      DOWNTO 5)))) + SIGNED'( "0101"), 4));
  PAD_d_not_nl <= NOT reg_PAD_d_1_PAD_d_or_cse;
  temp_mux_nl <= MUX_v_11_2_2(z_out_6, temp_1_sva_2, or_tmp_49);
  not_nl <= NOT or_tmp_41;
  CONV_NB_K_mux1h_2_nl <= MUX1HOT_v_2_5_2(STD_LOGIC_VECTOR'( '0' & (o_d_1_0_sva_1(0))),
      PAD_d_1_0_sva_3, CONV_K_D_l_1_0_sva_3, CONV_K_H_m_1_0_sva_3, CONV_K_W_n_1_0_sva,
      STD_LOGIC_VECTOR'( (fsm_output(15)) & (fsm_output(6)) & (fsm_output(11)) &
      (fsm_output(10)) & (fsm_output(7))));
  z_out <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(CONV_NB_K_mux1h_2_nl) + UNSIGNED'(
      "01"), 2));
  PAD_for_for_mux_2_nl <= MUX_v_8_2_2(STD_LOGIC_VECTOR'( "10101111"), (z_out_4(7
      DOWNTO 0)), fsm_output(12));
  PAD_for_for_mux_3_nl <= MUX_v_7_2_2((z_out_5(7 DOWNTO 1)), (CONV_H_SLIDE_acc_14_sdt(7
      DOWNTO 1)), fsm_output(12));
  z_out_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(PAD_for_for_mux_2_nl) + CONV_UNSIGNED(UNSIGNED(PAD_for_for_mux_3_nl),
      8), 8));
  CONV_K_W_mux_5_nl <= MUX_v_8_2_2(CONV_H_SLIDE_k_7_0_sva, STD_LOGIC_VECTOR'( "10000111"),
      fsm_output(1));
  CONV_K_W_mux_6_nl <= MUX_v_7_2_2((STD_LOGIC_VECTOR'( "00000") & CONV_K_W_n_1_0_sva),
      PAD_for_r_6_0_sva_4, fsm_output(1));
  z_out_2 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(CONV_K_W_mux_5_nl) + CONV_UNSIGNED(UNSIGNED(CONV_K_W_mux_6_nl),
      8), 8));
  CONV_V_SLIDE_or_2_nl <= (fsm_output(5)) OR (fsm_output(2));
  CONV_V_SLIDE_CONV_V_SLIDE_mux_1_nl <= MUX_v_7_2_2(o_r_6_0_lpi_4, PAD_for_r_6_0_sva_4,
      CONV_V_SLIDE_or_2_nl);
  CONV_V_SLIDE_nor_1_nl <= NOT((fsm_output(14)) OR (fsm_output(5)) OR (fsm_output(12)));
  CONV_V_SLIDE_or_3_nl <= (fsm_output(14)) OR (fsm_output(5));
  CONV_V_SLIDE_mux1h_2_nl <= MUX1HOT_v_3_3_2(STD_LOGIC_VECTOR'( "001"), PAD_for_for_else_else_acc_5_psp_sva_2_7_5,
      (o_c_7_0_lpi_4(7 DOWNTO 5)), STD_LOGIC_VECTOR'( CONV_V_SLIDE_or_3_nl & (fsm_output(2))
      & (fsm_output(12))));
  z_out_3 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(CONV_V_SLIDE_CONV_V_SLIDE_mux_1_nl),
      8) + CONV_UNSIGNED(CONV_SIGNED(SIGNED(CONV_V_SLIDE_nor_1_nl & CONV_V_SLIDE_mux1h_2_nl),
      4), 8), 8));
  CONV_K_W_or_3_nl <= TO_STDLOGIC(fsm_output(2 DOWNTO 1)/=STD_LOGIC_VECTOR'("00"));
  CONV_K_W_mux1h_2_nl <= MUX1HOT_v_2_4_2(STD_LOGIC_VECTOR'( CONV_NB_K_i_1_0_sva_4_1
      & CONV_NB_K_i_1_0_sva_4_0), PAD_d_1_0_sva_3, o_d_1_0_sva_1, CONV_K_D_l_1_0_sva_3,
      STD_LOGIC_VECTOR'( (fsm_output(8)) & CONV_K_W_or_3_nl & (fsm_output(12)) &
      (fsm_output(7))));
  CONV_K_W_nor_3_nl <= NOT(CONV_K_W_or_ssc OR CONV_K_W_or_2_ssc);
  CONV_K_W_CONV_K_W_mux_1_nl <= MUX_v_2_2_2(STD_LOGIC_VECTOR'( "01"), STD_LOGIC_VECTOR'(
      "10"), CONV_K_W_or_ssc);
  z_out_4 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(CONV_K_W_mux1h_2_nl)
      * UNSIGNED(CONV_K_W_CONV_K_W_or_cse & STD_LOGIC_VECTOR'( "00") & STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_K_W_CONV_K_W_or_cse,
      1),2)) & '0' & (NOT (fsm_output(8))) & '0' & CONV_K_W_nor_3_nl & '1' & CONV_K_W_CONV_K_W_mux_1_nl
      & '1')), 14));
  CONV_H_SLIDE_mux_3_nl <= MUX_v_8_2_2(o_c_7_0_lpi_4, PAD_for_for_c_7_0_sva_3, fsm_output(1));
  z_out_5 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(CONV_H_SLIDE_mux_3_nl) + UNSIGNED'(
      "00000001"), 8));
  PAD_for_for_else_else_acc_17_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(PAD_for_r_6_0_sva_4),
      7), 9) + CONV_SIGNED(CONV_SIGNED(SIGNED(z_out_3(7 DOWNTO 2)), 6), 9), 9));
  CONV_K_W_mux_7_nl <= MUX_v_11_2_2(temp_1_lpi_7, (STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(PAD_for_for_else_else_acc_17_nl),
      9)) & (z_out_3(1 DOWNTO 0))), fsm_output(2));
  CONV_K_W_mul_13_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED'( SIGNED(CONV_K_W_asn_19_itm_1)
      * SIGNED(CONV_K_W_mux_itm_1)), 11));
  CONV_K_W_mux_8_nl <= MUX_v_11_2_2(STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(CONV_K_W_mul_13_nl),
      11)), ((z_out_4(7 DOWNTO 0)) & STD_LOGIC_VECTOR'( "011")), fsm_output(2));
  z_out_6 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(CONV_K_W_mux_7_nl) + UNSIGNED(CONV_K_W_mux_8_nl),
      11));
END v1;

-- ------------------------------------------------------------------
--  Design Unit:    apply_conv
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.funcs.ALL;
USE mgc_hls.mgc_ioport_comps_v11.ALL;
USE mgc_hls.singleport_ram_be_pkg.ALL;


ENTITY apply_conv IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    conv_in_rsc_addr : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
    conv_in_rsc_re : OUT STD_LOGIC;
    conv_in_rsc_data_out : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
    conv_in_rsc_triosy_lz : OUT STD_LOGIC;
    conv_out_rsc_data_in : OUT STD_LOGIC_VECTOR (10 DOWNTO 0);
    conv_out_rsc_addr : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
    conv_out_rsc_we : OUT STD_LOGIC;
    conv_out_rsc_triosy_lz : OUT STD_LOGIC
  );
END apply_conv;

ARCHITECTURE v1 OF apply_conv IS
  -- Default Constants
  SIGNAL PWR : STD_LOGIC;
  SIGNAL GND : STD_LOGIC;

  -- Interconnect Declarations
  SIGNAL conv_in_rsci_addr_d : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL conv_in_rsci_re_d : STD_LOGIC;
  SIGNAL conv_in_rsci_data_out_d : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL conv_out_rsci_data_in_d : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL conv_out_rsci_addr_d : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL conv_out_rsci_we_d : STD_LOGIC;
  SIGNAL pad_input_rsci_data_in_d : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL pad_input_rsci_addr_d : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL pad_input_rsci_re_d : STD_LOGIC;
  SIGNAL pad_input_rsci_we_d : STD_LOGIC;
  SIGNAL pad_input_rsci_data_out_d : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL pad_input_rsc_en : STD_LOGIC;
  SIGNAL pad_input_rsc_data_out : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL pad_input_rsc_we : STD_LOGIC;
  SIGNAL pad_input_rsc_re : STD_LOGIC;
  SIGNAL pad_input_rsc_addr : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL pad_input_rsc_data_in : STD_LOGIC_VECTOR (9 DOWNTO 0);

  SIGNAL pad_input_rsc_comp_data_in : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL pad_input_rsc_comp_addr : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL pad_input_rsc_comp_re : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL pad_input_rsc_comp_we : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL pad_input_rsc_comp_data_out : STD_LOGIC_VECTOR (9 DOWNTO 0);

  COMPONENT ram_Xilinx_ARTIX_7_2_RAMSB_singleport_rport_1_57600_10_16_0_1_0_0_0_1_1_1_0_57600_10_1_gen
    PORT(
      data_out : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
      re : OUT STD_LOGIC;
      addr : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
      addr_d : IN STD_LOGIC_VECTOR (15 DOWNTO 0);
      re_d : IN STD_LOGIC;
      data_out_d : OUT STD_LOGIC_VECTOR (9 DOWNTO 0)
    );
  END COMPONENT;
  SIGNAL conv_in_rsci_data_out : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL conv_in_rsci_addr : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL conv_in_rsci_addr_d_1 : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL conv_in_rsci_data_out_d_1 : STD_LOGIC_VECTOR (9 DOWNTO 0);

  COMPONENT ram_Xilinx_ARTIX_7_2_RAMSB_singleport_wport_2_57600_11_16_0_1_0_0_0_1_1_1_0_57600_11_1_gen
    PORT(
      we : OUT STD_LOGIC;
      addr : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
      data_in : OUT STD_LOGIC_VECTOR (10 DOWNTO 0);
      data_in_d : IN STD_LOGIC_VECTOR (10 DOWNTO 0);
      addr_d : IN STD_LOGIC_VECTOR (15 DOWNTO 0);
      we_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL conv_out_rsci_addr : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL conv_out_rsci_data_in : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL conv_out_rsci_data_in_d_1 : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL conv_out_rsci_addr_d_1 : STD_LOGIC_VECTOR (15 DOWNTO 0);

  COMPONENT ram_Xilinx_ARTIX_7_2_RAMSB_singleport_rwport_en_3_59292_10_16_0_1_0_0_0_1_1_1_0_59292_10_1_gen
    PORT(
      en : OUT STD_LOGIC;
      data_out : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
      we : OUT STD_LOGIC;
      re : OUT STD_LOGIC;
      addr : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
      data_in : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
      data_in_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
      addr_d : IN STD_LOGIC_VECTOR (15 DOWNTO 0);
      re_d : IN STD_LOGIC;
      we_d : IN STD_LOGIC;
      data_out_d : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
      en_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL pad_input_rsci_data_out : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL pad_input_rsci_addr : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL pad_input_rsci_data_in : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL pad_input_rsci_data_in_d_1 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL pad_input_rsci_addr_d_1 : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL pad_input_rsci_data_out_d_1 : STD_LOGIC_VECTOR (9 DOWNTO 0);

  COMPONENT apply_conv_core
    PORT(
      clk : IN STD_LOGIC;
      rst : IN STD_LOGIC;
      conv_in_rsc_triosy_lz : OUT STD_LOGIC;
      conv_out_rsc_triosy_lz : OUT STD_LOGIC;
      conv_in_rsci_addr_d : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
      conv_in_rsci_re_d : OUT STD_LOGIC;
      conv_in_rsci_data_out_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
      conv_out_rsci_data_in_d : OUT STD_LOGIC_VECTOR (10 DOWNTO 0);
      conv_out_rsci_addr_d : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
      conv_out_rsci_we_d : OUT STD_LOGIC;
      pad_input_rsci_data_in_d : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
      pad_input_rsci_addr_d : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
      pad_input_rsci_re_d : OUT STD_LOGIC;
      pad_input_rsci_we_d : OUT STD_LOGIC;
      pad_input_rsci_data_out_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0)
    );
  END COMPONENT;
  SIGNAL apply_conv_core_inst_conv_in_rsci_addr_d : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL apply_conv_core_inst_conv_in_rsci_data_out_d : STD_LOGIC_VECTOR (9 DOWNTO
      0);
  SIGNAL apply_conv_core_inst_conv_out_rsci_data_in_d : STD_LOGIC_VECTOR (10 DOWNTO
      0);
  SIGNAL apply_conv_core_inst_conv_out_rsci_addr_d : STD_LOGIC_VECTOR (15 DOWNTO
      0);
  SIGNAL apply_conv_core_inst_pad_input_rsci_data_in_d : STD_LOGIC_VECTOR (9 DOWNTO
      0);
  SIGNAL apply_conv_core_inst_pad_input_rsci_addr_d : STD_LOGIC_VECTOR (15 DOWNTO
      0);
  SIGNAL apply_conv_core_inst_pad_input_rsci_data_out_d : STD_LOGIC_VECTOR (9 DOWNTO
      0);

BEGIN
  -- Default Constant Signal Assignments
  PWR <= '1';
  GND <= '0';

  pad_input_rsc_comp : mgc_hls.singleport_ram_be_pkg.singleport_ram_be
    GENERIC MAP(
      ram_id => 3,
      words => 59292,
      width => 10,
      addr_width => 16,
      a_reset_active => 0,
      s_reset_active => 1,
      enable_active => 0,
      re_active => 0,
      we_active => 0,
      num_byte_enables => 1,
      clock_edge => 1,
      num_input_registers => 1,
      num_output_registers => 0,
      no_of_singleport_readwrite_port => 1
      )
    PORT MAP(
      data_in => pad_input_rsc_comp_data_in,
      addr => pad_input_rsc_comp_addr,
      re => pad_input_rsc_comp_re,
      we => pad_input_rsc_comp_we,
      data_out => pad_input_rsc_comp_data_out,
      clk => clk,
      a_rst => PWR,
      s_rst => rst,
      en => pad_input_rsc_en
    );
  pad_input_rsc_comp_data_in <= pad_input_rsc_data_in;
  pad_input_rsc_comp_addr <= pad_input_rsc_addr;
  pad_input_rsc_comp_re(0) <= pad_input_rsc_re;
  pad_input_rsc_comp_we(0) <= pad_input_rsc_we;
  pad_input_rsc_data_out <= pad_input_rsc_comp_data_out;

  conv_in_rsci : ram_Xilinx_ARTIX_7_2_RAMSB_singleport_rport_1_57600_10_16_0_1_0_0_0_1_1_1_0_57600_10_1_gen
    PORT MAP(
      data_out => conv_in_rsci_data_out,
      re => conv_in_rsc_re,
      addr => conv_in_rsci_addr,
      addr_d => conv_in_rsci_addr_d_1,
      re_d => conv_in_rsci_re_d,
      data_out_d => conv_in_rsci_data_out_d_1
    );
  conv_in_rsci_data_out <= conv_in_rsc_data_out;
  conv_in_rsc_addr <= conv_in_rsci_addr;
  conv_in_rsci_addr_d_1 <= conv_in_rsci_addr_d;
  conv_in_rsci_data_out_d <= conv_in_rsci_data_out_d_1;

  conv_out_rsci : ram_Xilinx_ARTIX_7_2_RAMSB_singleport_wport_2_57600_11_16_0_1_0_0_0_1_1_1_0_57600_11_1_gen
    PORT MAP(
      we => conv_out_rsc_we,
      addr => conv_out_rsci_addr,
      data_in => conv_out_rsci_data_in,
      data_in_d => conv_out_rsci_data_in_d_1,
      addr_d => conv_out_rsci_addr_d_1,
      we_d => conv_out_rsci_we_d
    );
  conv_out_rsc_addr <= conv_out_rsci_addr;
  conv_out_rsc_data_in <= conv_out_rsci_data_in;
  conv_out_rsci_data_in_d_1 <= conv_out_rsci_data_in_d;
  conv_out_rsci_addr_d_1 <= conv_out_rsci_addr_d;

  pad_input_rsci : ram_Xilinx_ARTIX_7_2_RAMSB_singleport_rwport_en_3_59292_10_16_0_1_0_0_0_1_1_1_0_59292_10_1_gen
    PORT MAP(
      en => pad_input_rsc_en,
      data_out => pad_input_rsci_data_out,
      we => pad_input_rsc_we,
      re => pad_input_rsc_re,
      addr => pad_input_rsci_addr,
      data_in => pad_input_rsci_data_in,
      data_in_d => pad_input_rsci_data_in_d_1,
      addr_d => pad_input_rsci_addr_d_1,
      re_d => pad_input_rsci_re_d,
      we_d => pad_input_rsci_we_d,
      data_out_d => pad_input_rsci_data_out_d_1,
      en_d => GND
    );
  pad_input_rsci_data_out <= pad_input_rsc_data_out;
  pad_input_rsc_addr <= pad_input_rsci_addr;
  pad_input_rsc_data_in <= pad_input_rsci_data_in;
  pad_input_rsci_data_in_d_1 <= pad_input_rsci_data_in_d;
  pad_input_rsci_addr_d_1 <= pad_input_rsci_addr_d;
  pad_input_rsci_data_out_d <= pad_input_rsci_data_out_d_1;

  apply_conv_core_inst : apply_conv_core
    PORT MAP(
      clk => clk,
      rst => rst,
      conv_in_rsc_triosy_lz => conv_in_rsc_triosy_lz,
      conv_out_rsc_triosy_lz => conv_out_rsc_triosy_lz,
      conv_in_rsci_addr_d => apply_conv_core_inst_conv_in_rsci_addr_d,
      conv_in_rsci_re_d => conv_in_rsci_re_d,
      conv_in_rsci_data_out_d => apply_conv_core_inst_conv_in_rsci_data_out_d,
      conv_out_rsci_data_in_d => apply_conv_core_inst_conv_out_rsci_data_in_d,
      conv_out_rsci_addr_d => apply_conv_core_inst_conv_out_rsci_addr_d,
      conv_out_rsci_we_d => conv_out_rsci_we_d,
      pad_input_rsci_data_in_d => apply_conv_core_inst_pad_input_rsci_data_in_d,
      pad_input_rsci_addr_d => apply_conv_core_inst_pad_input_rsci_addr_d,
      pad_input_rsci_re_d => pad_input_rsci_re_d,
      pad_input_rsci_we_d => pad_input_rsci_we_d,
      pad_input_rsci_data_out_d => apply_conv_core_inst_pad_input_rsci_data_out_d
    );
  conv_in_rsci_addr_d <= apply_conv_core_inst_conv_in_rsci_addr_d;
  apply_conv_core_inst_conv_in_rsci_data_out_d <= conv_in_rsci_data_out_d;
  conv_out_rsci_data_in_d <= apply_conv_core_inst_conv_out_rsci_data_in_d;
  conv_out_rsci_addr_d <= apply_conv_core_inst_conv_out_rsci_addr_d;
  pad_input_rsci_data_in_d <= apply_conv_core_inst_pad_input_rsci_data_in_d;
  pad_input_rsci_addr_d <= apply_conv_core_inst_pad_input_rsci_addr_d;
  apply_conv_core_inst_pad_input_rsci_data_out_d <= pad_input_rsci_data_out_d;

END v1;



