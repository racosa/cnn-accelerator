// ----------------------------------------------------------------------------
// SystemC Testbench Body
//
//    HLS version: 10.0a/269363 Production Release
//       HLS date: Wed Nov  9 17:38:00 PST 2016
//  Flow Packages: HDL_Tcl 8.0a, SCVerify 8.0a
//
//   Generated by: xph3sei702@cimeld95
// Generated date: Wed Jan 24 16:19:57 CET 2018
//
// ----------------------------------------------------------------------------
// 
// -------------------------------------
// testbench
// User supplied testbench
// -------------------------------------
// 
#include "mc_testbench.h"
#include <mc_testbench_util.h>
#include <mc_simulator_extensions.h>

testbench* testbench::that;
std::vector<mc_end_of_testbench*> testbench::_end_of_tb_objs;
bool testbench::conv_in_ignore;
bool testbench::conv_in_skip;
bool testbench::conv_in_skip_quiet;
bool testbench::conv_in_skip_once;
bool testbench::conv_in_skip_noerr;
void mc_testbench_conv_in_skip(bool v) { testbench::conv_in_skip = v; }
int testbench::conv_in_array_comp_first;
int testbench::conv_in_array_comp_last;
int testbench::conv_in_wait_cycles;
mc_wait_ctrl testbench::conv_in_wait_ctrl;
bool testbench::conv_out_ignore;
bool testbench::conv_out_skip;
bool testbench::conv_out_skip_quiet;
bool testbench::conv_out_skip_once;
bool testbench::conv_out_skip_noerr;
void mc_testbench_conv_out_skip(bool v) { testbench::conv_out_skip = v; }
int testbench::conv_out_array_comp_first;
int testbench::conv_out_array_comp_last;
bool testbench::conv_out_use_mask;
ac_fixed<11, 11, true, AC_TRN, AC_WRAP > testbench::conv_out_output_mask;
int testbench::conv_out_wait_cycles;
mc_wait_ctrl testbench::conv_out_wait_ctrl;
#ifndef CCS_SCVERIFY_USE_CCS_BLOCK
extern "C++" void apply_conv( ac_fixed<10, 10, true, AC_TRN, AC_WRAP > conv_in[57600],  ac_fixed<11, 11, true, AC_TRN, AC_WRAP > conv_out[57600]);
#endif

// ============================================
// Function: wait_for_idle_sync
// --------------------------------------------

void testbench::wait_for_idle_sync()
{
   std::cout << "mc_testbench STOPPING   @ " << sc_time_stamp() << std::endl;
   that->cpp_testbench_active.write(false);
   while (that->design_is_idle.read())  that->wait(that->design_is_idle.value_changed_event());
   while (!that->design_is_idle.read()) that->wait(that->design_is_idle.value_changed_event());
   that->cpp_testbench_active.write(true);
   std::cout << "mc_testbench CONTINUING @ " << sc_time_stamp() << std::endl;
}
// ============================================
// Function: set_enable_stalls
// --------------------------------------------

void testbench::set_enable_stalls(bool flag)
{
   if (flag) {
     std::cout << "Enabling STALL_FLAG toggling" << std::endl;
     that->enable_stalls.write(sc_dt::Log_1);
   } else {
     std::cout << "Disabling STALL_FLAG toggling" << std::endl;
     that->enable_stalls.write(sc_dt::Log_0);
   }
}
// ============================================
// Function: register_end_of_testbench_obj
// --------------------------------------------

void testbench::register_end_of_testbench_obj(mc_end_of_testbench* obj)
{
   _end_of_tb_objs.push_back(obj);
}
// ============================================
// Function: capture_conv_in
// --------------------------------------------

void testbench::capture_conv_in( ac_fixed<10, 10, true, AC_TRN, AC_WRAP > conv_in[57600])
{
   if (conv_in_capture_count == wait_cnt)
      wait_on_input_required();
   if (_capture_conv_in && !conv_in_ignore)
   {
      int cur_iter = conv_in_iteration_count;
      ++conv_in_iteration_count;
      mgc_sysc_ver_array1D<ac_fixed<10, 10, true, AC_TRN, AC_WRAP >,57600> conv_in_tmp;
      int conv_in_linear_idx = 0;
      for (int conv_in_idx_0 = 0; conv_in_idx_0 < 57600; ++conv_in_idx_0)
         conv_in_tmp[conv_in_linear_idx++] = conv_in[conv_in_idx_0];
      ccs_conv_in->put(conv_in_tmp);
      ++conv_in_capture_count;
      mc_testbench::process_wait_ctrl("conv_in",conv_in_wait_cycles,conv_in_wait_ctrl,ccs_wait_ctrl_conv_in.operator->(),cur_iter,conv_in_capture_count,0);
   }
   conv_in_ignore = false;
}
// ============================================
// Function: capture_conv_out
// --------------------------------------------

void testbench::capture_conv_out( ac_fixed<11, 11, true, AC_TRN, AC_WRAP > conv_out[57600])
{
   if (_capture_conv_out)
   {
      int cur_iter = conv_out_iteration_count;
      ++conv_out_iteration_count;
      mc_golden_info< mgc_sysc_ver_array1D<ac_fixed<11, 11, true, AC_TRN, AC_WRAP >,57600>, ac_fixed<11, 11, true, AC_TRN, AC_WRAP > > conv_out_tmp(conv_out_ignore, false, conv_out_iteration_count);
      conv_out_tmp._data.mc_testbench_process_array_bounds("conv_out",conv_out_array_comp_first,conv_out_array_comp_last,57599,0);
      // BEGIN: testbench output_mask control for field_name conv_out
      if ( conv_out_use_mask ) {
         conv_out_tmp._use_mask = true;
         conv_out_tmp._mask = conv_out_output_mask ;
      }
      // END: testbench output_mask control for field_name conv_out
      int conv_out_linear_idx = 0;
      for (int conv_out_idx_0 = 0; conv_out_idx_0 < 57600; ++conv_out_idx_0)
         conv_out_tmp._data[conv_out_linear_idx++] = conv_out[conv_out_idx_0];
      if (!conv_out_skip) {
         conv_out_golden.put(conv_out_tmp);
         ++conv_out_capture_count;
      } else {
         if (!conv_out_skip_quiet || !conv_out_skip_once) {
            std::ostringstream msg; msg.str("");
            msg << "conv_out_skip=true for iteration=" << conv_out_iteration_count << " @ " << sc_time_stamp();
            SC_REPORT_WARNING("User testbench", msg.str().c_str());
            conv_out_skip_once = true;
         }
      }
      mc_testbench::process_wait_ctrl("conv_out",conv_out_wait_cycles,conv_out_wait_ctrl,ccs_wait_ctrl_conv_out.operator->(),cur_iter,conv_out_capture_count,0);
      conv_out_use_mask = false;
   }
   conv_out_ignore = false;
   conv_out_skip = false;
}
// ============================================
// Function: wait_on_input_required
// --------------------------------------------

void testbench::wait_on_input_required()
{
   ++wait_cnt;
   wait(SC_ZERO_TIME); // get fifos a chance to update
   while (atleast_one_active_input) {
      if (_capture_conv_in && ccs_conv_in->used() == 0) return;
      that->cpp_testbench_active.write(false);
      wait(ccs_conv_in->ok_to_put());
      that->cpp_testbench_active.write(true);
   }
}
// ============================================
// Function: capture_IN
// --------------------------------------------

void testbench::capture_IN( ac_fixed<10, 10, true, AC_TRN, AC_WRAP > conv_in[57600],  ac_fixed<11, 11, true, AC_TRN, AC_WRAP > conv_out[57600])
{
   that->capture_conv_in(conv_in);
}
// ============================================
// Function: capture_OUT
// --------------------------------------------

void testbench::capture_OUT( ac_fixed<10, 10, true, AC_TRN, AC_WRAP > conv_in[57600],  ac_fixed<11, 11, true, AC_TRN, AC_WRAP > conv_out[57600])
{
   that->capture_conv_out(conv_out);
}
// ============================================
// Function: exec_apply_conv
// --------------------------------------------

void testbench::exec_apply_conv( ac_fixed<10, 10, true, AC_TRN, AC_WRAP > conv_in[57600],  ac_fixed<11, 11, true, AC_TRN, AC_WRAP > conv_out[57600])
{
   #ifndef CCS_SCVERIFY_USE_CCS_BLOCK
   that->cpp_testbench_active.write(true);
   capture_IN(conv_in, conv_out);
   apply_conv(conv_in, conv_out);
   // throttle ac_channel based on number of calls to chan::size() or chan::empty() or chan::nb_read() (but not chan::available()) 
   if (1) {
      int cnt=0;
      if (cnt) std::cout << "mc_testbench.cpp: CONTINUES @ " << sc_time_stamp() << std::endl;
      if (cnt) that->cpp_testbench_active.write(true);
   }
   capture_OUT(conv_in, conv_out);
   #else
   #endif
}
// ============================================
// Function: start_of_simulation
// --------------------------------------------

void testbench::start_of_simulation()
{
   set_enable_stalls(false);
}
// ============================================
// Function: end_of_simulation
// --------------------------------------------

void testbench::end_of_simulation()
{
   if (!_checked_results) {
      SC_REPORT_INFO(name(), "Simulation ran into deadlock");
      check_results();
   }
}
// ============================================
// Function: check_results
// --------------------------------------------

void testbench::check_results()
{
   for (std::vector<mc_end_of_testbench*>::iterator i = _end_of_tb_objs.begin(); i != _end_of_tb_objs.end(); ++i)
      (*i)->end_of_testbench();
   
   if (_checked_results) return;
   _checked_results = true;
   cout<<endl;
   cout<<"Checking results"<<endl;
   _failed = false;
   if (main_exit_code) _failed = true;
   int _num_outputs_checked = 0;
   
   if (!_capture_conv_out) {
      cout<<"'conv_out' - warning, output was optimized away"<<endl;
   } else {
      _num_outputs_checked++;
      cout<<"'conv_out'"<<endl;
      cout<<"   capture count        = "<<conv_out_capture_count<<endl;
      cout<<"   comparison count     = "<<conv_out_comp->get_compare_count();
      if (conv_out_comp->get_partial_compare_count()) 
         cout <<" ("<<conv_out_comp->get_partial_compare_count()<<" partial)";
      if (conv_out_comp->get_mask_compare_count()) 
         cout <<" ("<<conv_out_comp->get_mask_compare_count()<<" masked)";
      cout << endl;
      cout<<"   ignore count         = "<<conv_out_comp->get_ignore_count()<<endl;
      cout<<"   error count          = "<<conv_out_comp->get_error_count()<<endl;
      cout<<"   stuck in dut fifo    = "<<ccs_conv_out->used()<<endl;
      cout<<"   stuck in golden fifo = "<<conv_out_golden.used()<<endl;
      if (conv_out_comp->get_error_count() > 0) cout << "   Error: output 'conv_out' had comparison errors"<<endl;
      if (conv_out_comp->get_compare_count() < conv_out_capture_count) cout << "   Error: output 'conv_out' has incomplete comparisons"<<endl;
      if (conv_out_skip_noerr) {
         if (conv_out_capture_count == 0) cout << "   Warning: output 'conv_out' has no golden values to compare against"<<endl;
      } else
         if (conv_out_capture_count == 0) cout << "   Error: output 'conv_out' has no golden values to compare against"<<endl;
      _failed = _failed || conv_out_comp->get_error_count() > 0;
      _failed = _failed || conv_out_comp->get_compare_count() < conv_out_capture_count;
      if (!conv_out_skip_noerr)
         _failed = _failed || conv_out_capture_count == 0;
      cout<<endl;
   }
   cout<<endl;
   if (_num_outputs_checked == 0) {
      cout<<"Error: All outputs were optimized away. No output values were compared."<<endl;
      _failed = _failed || (_num_outputs_checked == 0);
   }
   if (main_exit_code) cout << "Error: C++ Testbench 'main()' returned a non-zero exit code ("<<main_exit_code<<"). Check your testbench." <<endl;
   cout<<(_failed ? "Error: ":"Info: ")<<"Simulation "<<(_failed ? "FAILED":"PASSED")<<" @ "<<sc_time_stamp()<<endl;
}
// ============================================
// Function: failed
// --------------------------------------------

bool testbench::failed()
{
   return _failed;
}
// ---------------------------------------------------------------
// Process: SC_METHOD wait_for_end
// Static sensitivity: sensitive << clk.pos() << testbench_end_event;

void testbench::wait_for_end() {
   // If run() has not finished, we do nothing here
   if (!testbench_ended) return;
   // check for completed outputs
   if (conv_out_comp->get_compare_count() < conv_out_capture_count) {testbench_end_event.notify(1,SC_NS); return;}
   // If we made it here, all outputs have flushed. Check the results
   SC_REPORT_INFO(name(), "Simulation completed");
   check_results();
   sc_stop();
}
// ---------------------------------------------------------------
// Process: SC_THREAD run
// Static sensitivity: 

void testbench::run() {
   conv_in_ignore = false;
   conv_in_skip = false;
   conv_in_skip_quiet = false;
   conv_in_skip_once = false;
   conv_in_skip_noerr = false;
   conv_in_array_comp_first = -1;
   conv_in_array_comp_last = -1;
   conv_in_wait_cycles = 0;
   conv_in_wait_ctrl.clear();
   conv_in_capture_count = 0;
   conv_in_iteration_count = 0;
   conv_out_ignore = false;
   conv_out_skip = false;
   conv_out_skip_quiet = false;
   conv_out_skip_once = false;
   conv_out_skip_noerr = false;
   conv_out_array_comp_first = -1;
   conv_out_array_comp_last = -1;
   conv_out_use_mask = false;
   conv_out_output_mask = ~0;
   conv_out_wait_cycles = 0;
   conv_out_wait_ctrl.clear();
   conv_out_capture_count = 0;
   conv_out_iteration_count = 0;
   main_exit_code = main();
   cout<<"Info: Execution of user-supplied C++ testbench 'main()' has completed with exit code = " << main_exit_code << endl;
   cout<<endl;
   cout<<"Info: Collecting data completed"<<endl;
   cout<<"   captured "<<conv_in_capture_count<<" values of conv_in"<<endl;
   cout<<"   captured "<<conv_out_capture_count<<" values of conv_out"<<endl;
   testbench_ended = true;
   testbench_end_event.notify(SC_ZERO_TIME);
}
#ifdef CCS_SCVERIFY_USE_CCS_BLOCK
#include "ccs_block_macros.cpp"
#endif
