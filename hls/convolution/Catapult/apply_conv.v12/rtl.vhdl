-- ----------------------------------------------------------------------
--  HLS HDL:        VHDL Netlister
--  HLS Version:    10.0a/269363 Production Release
--  HLS Date:       Wed Nov  9 17:38:00 PST 2016
-- 
--  Generated by:   xph3sei702@cimeld95
--  Generated date: Wed Jan 24 16:19:56 2018
-- ----------------------------------------------------------------------

-- 
-- ------------------------------------------------------------------
--  Design Unit:    ram_Xilinx_ARTIX_7_2_RAMSB_singleport_rwport_en_3_59292_10_16_0_1_0_0_0_1_1_1_0_59292_10_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.funcs.ALL;
USE mgc_hls.mgc_ioport_comps_v11.ALL;
USE mgc_hls.singleport_ram_be_pkg.ALL;


ENTITY ram_Xilinx_ARTIX_7_2_RAMSB_singleport_rwport_en_3_59292_10_16_0_1_0_0_0_1_1_1_0_59292_10_1_gen
    IS
  PORT(
    en : OUT STD_LOGIC;
    data_out : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
    we : OUT STD_LOGIC;
    re : OUT STD_LOGIC;
    addr : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
    data_in : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    data_in_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
    addr_d : IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    re_d : IN STD_LOGIC;
    we_d : IN STD_LOGIC;
    data_out_d : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    en_d : IN STD_LOGIC
  );
END ram_Xilinx_ARTIX_7_2_RAMSB_singleport_rwport_en_3_59292_10_16_0_1_0_0_0_1_1_1_0_59292_10_1_gen;

ARCHITECTURE v12 OF ram_Xilinx_ARTIX_7_2_RAMSB_singleport_rwport_en_3_59292_10_16_0_1_0_0_0_1_1_1_0_59292_10_1_gen
    IS
  -- Default Constants

BEGIN
  -- Default Constant Signal Assignments

  en <= (en_d);
  data_out_d <= data_out;
  we <= (we_d);
  re <= (re_d);
  addr <= (addr_d);
  data_in <= (data_in_d);
END v12;

-- ------------------------------------------------------------------
--  Design Unit:    ram_Xilinx_ARTIX_7_2_RAMSB_singleport_wport_2_57600_11_16_0_1_0_0_0_1_1_1_0_57600_11_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.funcs.ALL;
USE mgc_hls.mgc_ioport_comps_v11.ALL;
USE mgc_hls.singleport_ram_be_pkg.ALL;


ENTITY ram_Xilinx_ARTIX_7_2_RAMSB_singleport_wport_2_57600_11_16_0_1_0_0_0_1_1_1_0_57600_11_1_gen
    IS
  PORT(
    we : OUT STD_LOGIC;
    addr : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
    data_in : OUT STD_LOGIC_VECTOR (10 DOWNTO 0);
    data_in_d : IN STD_LOGIC_VECTOR (10 DOWNTO 0);
    addr_d : IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    we_d : IN STD_LOGIC
  );
END ram_Xilinx_ARTIX_7_2_RAMSB_singleport_wport_2_57600_11_16_0_1_0_0_0_1_1_1_0_57600_11_1_gen;

ARCHITECTURE v12 OF ram_Xilinx_ARTIX_7_2_RAMSB_singleport_wport_2_57600_11_16_0_1_0_0_0_1_1_1_0_57600_11_1_gen
    IS
  -- Default Constants

BEGIN
  -- Default Constant Signal Assignments

  we <= (we_d);
  addr <= (addr_d);
  data_in <= (data_in_d);
END v12;

-- ------------------------------------------------------------------
--  Design Unit:    ram_Xilinx_ARTIX_7_2_RAMSB_singleport_rport_1_57600_10_16_0_1_0_0_0_1_1_1_0_57600_10_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.funcs.ALL;
USE mgc_hls.mgc_ioport_comps_v11.ALL;
USE mgc_hls.singleport_ram_be_pkg.ALL;


ENTITY ram_Xilinx_ARTIX_7_2_RAMSB_singleport_rport_1_57600_10_16_0_1_0_0_0_1_1_1_0_57600_10_1_gen
    IS
  PORT(
    data_out : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
    re : OUT STD_LOGIC;
    addr : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
    addr_d : IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    re_d : IN STD_LOGIC;
    data_out_d : OUT STD_LOGIC_VECTOR (9 DOWNTO 0)
  );
END ram_Xilinx_ARTIX_7_2_RAMSB_singleport_rport_1_57600_10_16_0_1_0_0_0_1_1_1_0_57600_10_1_gen;

ARCHITECTURE v12 OF ram_Xilinx_ARTIX_7_2_RAMSB_singleport_rport_1_57600_10_16_0_1_0_0_0_1_1_1_0_57600_10_1_gen
    IS
  -- Default Constants

BEGIN
  -- Default Constant Signal Assignments

  data_out_d <= data_out;
  re <= (re_d);
  addr <= (addr_d);
END v12;

-- ------------------------------------------------------------------
--  Design Unit:    apply_conv_core_core_fsm
--  FSM Module
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.funcs.ALL;
USE mgc_hls.mgc_ioport_comps_v11.ALL;
USE mgc_hls.singleport_ram_be_pkg.ALL;


ENTITY apply_conv_core_core_fsm IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    fsm_output : OUT STD_LOGIC_VECTOR (1 DOWNTO 0)
  );
END apply_conv_core_core_fsm;

ARCHITECTURE v12 OF apply_conv_core_core_fsm IS
  -- Default Constants

  -- FSM State Type Declaration for apply_conv_core_core_fsm_1
  TYPE apply_conv_core_core_fsm_1_ST IS (core_rlp_C_0, main_C_0);

  SIGNAL state_var : apply_conv_core_core_fsm_1_ST;
  SIGNAL state_var_NS : apply_conv_core_core_fsm_1_ST;

BEGIN
  -- Default Constant Signal Assignments

  apply_conv_core_core_fsm_1 : PROCESS (state_var)
  BEGIN
    CASE state_var IS
      WHEN main_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10");
        state_var_NS <= main_C_0;
      -- core_rlp_C_0
      WHEN OTHERS =>
        fsm_output <= STD_LOGIC_VECTOR'( "01");
        state_var_NS <= main_C_0;
    END CASE;
  END PROCESS apply_conv_core_core_fsm_1;

  apply_conv_core_core_fsm_1_REG : PROCESS (clk)
  BEGIN
    IF clk'event AND ( clk = '1' ) THEN
      IF ( rst = '1' ) THEN
        state_var <= core_rlp_C_0;
      ELSE
        state_var <= state_var_NS;
      END IF;
    END IF;
  END PROCESS apply_conv_core_core_fsm_1_REG;

END v12;

-- ------------------------------------------------------------------
--  Design Unit:    apply_conv_core
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.funcs.ALL;
USE mgc_hls.mgc_ioport_comps_v11.ALL;
USE mgc_hls.singleport_ram_be_pkg.ALL;


ENTITY apply_conv_core IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    conv_in_rsc_triosy_lz : OUT STD_LOGIC;
    conv_out_rsc_triosy_lz : OUT STD_LOGIC;
    conv_in_rsci_addr_d : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
    conv_in_rsci_re_d : OUT STD_LOGIC;
    conv_in_rsci_data_out_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
    conv_out_rsci_data_in_d : OUT STD_LOGIC_VECTOR (10 DOWNTO 0);
    conv_out_rsci_addr_d : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
    conv_out_rsci_we_d : OUT STD_LOGIC;
    pad_input_rsci_data_in_d : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    pad_input_rsci_addr_d : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
    pad_input_rsci_re_d : OUT STD_LOGIC;
    pad_input_rsci_we_d : OUT STD_LOGIC;
    pad_input_rsci_data_out_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0)
  );
END apply_conv_core;

ARCHITECTURE v12 OF apply_conv_core IS
  -- Default Constants

  -- Interconnect Declarations
  SIGNAL conv_in_rsc_triosy_obj_ld : STD_LOGIC;
  SIGNAL conv_out_rsc_triosy_obj_ld : STD_LOGIC;
  SIGNAL fsm_output : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL or_dcpl_1 : STD_LOGIC;
  SIGNAL or_dcpl_3 : STD_LOGIC;
  SIGNAL or_dcpl_6 : STD_LOGIC;
  SIGNAL or_dcpl_7 : STD_LOGIC;
  SIGNAL and_dcpl_30 : STD_LOGIC;
  SIGNAL or_dcpl_20 : STD_LOGIC;
  SIGNAL or_dcpl_21 : STD_LOGIC;
  SIGNAL or_dcpl_23 : STD_LOGIC;
  SIGNAL or_dcpl_24 : STD_LOGIC;
  SIGNAL or_dcpl_25 : STD_LOGIC;
  SIGNAL or_dcpl_26 : STD_LOGIC;
  SIGNAL or_dcpl_28 : STD_LOGIC;
  SIGNAL or_dcpl_31 : STD_LOGIC;
  SIGNAL o_r_6_0_lpi_2 : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL o_c_7_0_lpi_2 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL o_d_1_0_lpi_2 : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL PAD_d_1_0_lpi_2 : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL PAD_for_r_6_0_lpi_3 : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL lfst_exit_PAD_for_1_lpi_2 : STD_LOGIC;
  SIGNAL PAD_for_for_c_7_0_lpi_3 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL CONV_NB_K_i_1_0_lpi_3 : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL CONV_V_SLIDE_j_6_0_lpi_3 : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL lfst_exit_CONV_V_SLIDE_1_lpi_3 : STD_LOGIC;
  SIGNAL CONV_H_SLIDE_k_7_0_lpi_2 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL lfst_exit_CONV_H_SLIDE_1_lpi_2 : STD_LOGIC;
  SIGNAL temp_1_lpi_2 : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL CONV_K_D_l_1_0_lpi_2 : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL lfst_exit_CONV_K_D_1_lpi_2 : STD_LOGIC;
  SIGNAL CONV_K_H_m_1_0_lpi_2 : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL lfst_exit_CONV_K_H_1_lpi_2 : STD_LOGIC;
  SIGNAL CONV_K_W_n_1_0_lpi_2 : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL exitL_exit_CONV_NB_K_sva : STD_LOGIC;
  SIGNAL exit_PAD_sva_2 : STD_LOGIC;
  SIGNAL exit_CONV_K_D_sva_2 : STD_LOGIC;
  SIGNAL exit_CONV_H_SLIDE_sva_7 : STD_LOGIC;
  SIGNAL exit_CONV_V_SLIDE_sva_3 : STD_LOGIC;
  SIGNAL exit_CONV_NB_K_sva_1 : STD_LOGIC;
  SIGNAL CONV_NB_K_equal_tmp_6 : STD_LOGIC;
  SIGNAL CONV_NB_K_equal_tmp_7 : STD_LOGIC;
  SIGNAL lfst_exit_CONV_H_SLIDE_1_lpi_1_dfm_4 : STD_LOGIC;
  SIGNAL exit_CONV_H_SLIDE_sva_8 : STD_LOGIC;
  SIGNAL exit_CONV_H_SLIDE_sva_9 : STD_LOGIC;
  SIGNAL CONV_H_SLIDE_CONV_H_SLIDE_and_itm_3 : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL CONV_K_W_slc_CONV_K_W_acc_2_psp_0_itm_3 : STD_LOGIC;
  SIGNAL CONV_K_W_mux_3_itm_4 : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL CONV_K_W_mux_3_itm_5 : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL o_c_slc_o_c_7_0_4_0_itm_5 : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL o_c_slc_o_c_7_0_4_0_itm_6 : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL PAD_for_for_if_PAD_for_for_if_or_itm_3 : STD_LOGIC;
  SIGNAL PAD_for_for_else_if_PAD_for_for_else_if_or_itm_3 : STD_LOGIC;
  SIGNAL exit_CONV_K_D_lpi_1_dfm_2_st_3 : STD_LOGIC;
  SIGNAL exit_CONV_NB_K_lpi_1_dfm_1_st_3 : STD_LOGIC;
  SIGNAL exit_CONV_NB_K_lpi_1_dfm_1_st_4 : STD_LOGIC;
  SIGNAL main_stage_0_2 : STD_LOGIC;
  SIGNAL main_stage_0_3 : STD_LOGIC;
  SIGNAL lfst_exit_CONV_NB_K_lpi_1_dfm_3_1 : STD_LOGIC;
  SIGNAL lfst_exit_CONV_NB_K_lpi_1_dfm_3_0 : STD_LOGIC;
  SIGNAL CONV_K_W_acc_14_itm_1_14_1_1 : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL CONV_K_W_acc_14_itm_1_0_1 : STD_LOGIC;
  SIGNAL CONV_H_SLIDE_acc_11_itm_1_10_3_1 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL CONV_H_SLIDE_acc_11_itm_1_2_1 : STD_LOGIC;
  SIGNAL CONV_H_SLIDE_acc_11_itm_1_1_0_1 : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL CONV_H_SLIDE_acc_11_itm_2_10_3_2 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL CONV_H_SLIDE_acc_11_itm_2_2_2 : STD_LOGIC;
  SIGNAL CONV_H_SLIDE_acc_11_itm_2_1_0_2 : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL lfst_exit_CONV_NB_K_lpi_1_dfm_st_1_1 : STD_LOGIC;
  SIGNAL lfst_exit_CONV_NB_K_lpi_1_dfm_st_1_0 : STD_LOGIC;
  SIGNAL lfst_exit_CONV_NB_K_lpi_1_dfm_st_2_1_1 : STD_LOGIC;
  SIGNAL lfst_exit_CONV_NB_K_lpi_1_dfm_st_2_0_1 : STD_LOGIC;
  SIGNAL CONV_NB_K_acc_tmp_2 : STD_LOGIC;
  SIGNAL CONV_K_D_acc_tmp_2 : STD_LOGIC;
  SIGNAL CONV_K_H_acc_tmp_2 : STD_LOGIC;
  SIGNAL CONV_K_W_acc_tmp_2 : STD_LOGIC;
  SIGNAL PAD_acc_tmp_2 : STD_LOGIC;
  SIGNAL lfst_exit_CONV_NB_K_lpi_1_dfm_1 : STD_LOGIC;
  SIGNAL lfst_exit_CONV_NB_K_lpi_1_dfm_0 : STD_LOGIC;
  SIGNAL exit_CONV_V_SLIDE_lpi_1_dfm_2 : STD_LOGIC;
  SIGNAL exit_CONV_H_SLIDE_lpi_1_dfm_2 : STD_LOGIC;
  SIGNAL exit_CONV_K_D_lpi_1_dfm_2 : STD_LOGIC;
  SIGNAL exit_CONV_K_H_lpi_1_dfm_2 : STD_LOGIC;
  SIGNAL lfst_exit_CONV_H_SLIDE_1_lpi_1_dfm : STD_LOGIC;
  SIGNAL lfst_exit_CONV_NB_K_lpi_1_dfm_3_1_mx0w0 : STD_LOGIC;
  SIGNAL lfst_exit_CONV_NB_K_lpi_1_dfm_3_0_mx0w0 : STD_LOGIC;
  SIGNAL CONV_NB_K_equal_tmp : STD_LOGIC;
  SIGNAL exit_CONV_NB_K_lpi_1_dfm_1 : STD_LOGIC;
  SIGNAL CONV_NB_K_equal_tmp_1 : STD_LOGIC;
  SIGNAL CONV_NB_K_and_ssc : STD_LOGIC;
  SIGNAL CONV_NB_K_and_6_ssc : STD_LOGIC;
  SIGNAL exit_PAD_lpi_1_dfm_2 : STD_LOGIC;
  SIGNAL CONV_NB_K_nor_dfs : STD_LOGIC;
  SIGNAL temp_1_sva_1 : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL CONV_NB_K_CONV_NB_K_nor_2_m1c : STD_LOGIC;
  SIGNAL reg_PAD_for_for_if_acc_itm_1_14_1_cse : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL reg_PAD_for_for_if_acc_itm_1_0_cse : STD_LOGIC;
  SIGNAL reg_PAD_for_for_c_slc_PAD_for_for_c_7_0_0_cse : STD_LOGIC;
  SIGNAL CONV_NB_K_and_17_cse : STD_LOGIC;
  SIGNAL asn_PAD_d_1_0_lpi_1_nor_cse : STD_LOGIC;
  SIGNAL PAD_for_r_6_0_lpi_1_dfm : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL PAD_for_for_else_else_acc_11_sdt : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL PAD_d_1_0_lpi_1_dfm : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL PAD_for_for_else_else_acc_5_psp_sva : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL CONV_K_W_n_1_0_sva_1 : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL CONV_K_H_m_1_0_lpi_1_dfm : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL CONV_K_H_m_1_0_sva_1 : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL CONV_K_D_l_1_0_lpi_1_dfm : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL CONV_K_D_l_1_0_sva_1 : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL o_r_6_0_lpi_1_dfm : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL and_103_tmp : STD_LOGIC;
  SIGNAL nor_tmp : STD_LOGIC;
  SIGNAL and_106_tmp : STD_LOGIC;
  SIGNAL CONV_NB_K_and_10_tmp : STD_LOGIC;
  SIGNAL temp_1_lpi_1_mx0 : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL PAD_for_for_c_7_0_lpi_1_dfm : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL PAD_for_r_6_0_sva_1 : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL PAD_for_for_c_7_0_sva_1 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL PAD_unequal_tmp : STD_LOGIC;
  SIGNAL CONV_NB_K_i_1_0_sva_1 : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL CONV_V_SLIDE_j_6_0_sva_1 : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL CONV_H_SLIDE_k_7_0_sva_1 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL CONV_H_SLIDE_k_7_0_lpi_1_dfm : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL CONV_K_W_n_1_0_lpi_1_dfm : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL lfst_exit_CONV_K_D_1_lpi_1_dfm : STD_LOGIC;
  SIGNAL PAD_d_1_0_sva_1 : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL PAD_for_for_if_acc_1_ncse : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL CONV_K_W_acc_2_psp_sva : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL CONV_K_W_acc_15_sdt : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL o_c_7_0_lpi_1_dfm : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL CONV_H_SLIDE_acc_14_sdt : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL o_d_1_0_lpi_1_dfm : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL CONV_H_SLIDE_acc_12_sdt_6_0 : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL CONV_K_W_acc_18_sdt : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL PAD_for_acc_itm_6 : STD_LOGIC;
  SIGNAL CONV_V_SLIDE_acc_itm_4 : STD_LOGIC;
  SIGNAL CONV_H_SLIDE_acc_itm_3 : STD_LOGIC;
  SIGNAL PAD_for_for_else_acc_itm_8 : STD_LOGIC;
  SIGNAL PAD_for_for_acc_itm_7 : STD_LOGIC;
  SIGNAL PAD_for_for_acc_1_itm_7 : STD_LOGIC;
  SIGNAL PAD_for_for_oif_acc_itm_7 : STD_LOGIC;
  SIGNAL PAD_for_for_else_oif_acc_itm_8 : STD_LOGIC;
  SIGNAL CONV_NB_K_and_8_rgt : STD_LOGIC;
  SIGNAL nor_14_rgt : STD_LOGIC;
  SIGNAL nor_15_rgt : STD_LOGIC;
  SIGNAL CONV_K_D_l_and_1_rgt : STD_LOGIC;
  SIGNAL reg_exit_CONV_K_D_lpi_1_dfm_2_st_2_cse : STD_LOGIC;

  SIGNAL PAD_for_for_if_mul_nl : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL CONV_K_W_mul_11_nl : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL CONV_NB_K_CONV_NB_K_nor_3_nl : STD_LOGIC;
  SIGNAL CONV_NB_K_and_1_nl : STD_LOGIC;
  SIGNAL CONV_NB_K_and_19_nl : STD_LOGIC;
  SIGNAL CONV_NB_K_and_20_nl : STD_LOGIC;
  SIGNAL CONV_NB_K_and_18_nl : STD_LOGIC;
  SIGNAL CONV_V_SLIDE_j_and_nl : STD_LOGIC;
  SIGNAL or_53_nl : STD_LOGIC;
  SIGNAL mux_nl : STD_LOGIC;
  SIGNAL mux_10_nl : STD_LOGIC;
  SIGNAL PAD_PAD_and_4_nl : STD_LOGIC;
  SIGNAL CONV_H_SLIDE_k_and_nl : STD_LOGIC;
  SIGNAL CONV_H_SLIDE_mul_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL CONV_K_W_asn_pref_pref_pref_4_6_CONV_K_W_acc_nl : STD_LOGIC_VECTOR (6 DOWNTO
      0);
  SIGNAL CONV_K_W_acc_20_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL CONV_K_W_mul_12_nl : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL CONV_NB_K_acc_1_nl : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL CONV_V_SLIDE_CONV_V_SLIDE_and_3_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL CONV_H_SLIDE_mux_4_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL CONV_H_SLIDE_acc_5_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL CONV_V_SLIDE_CONV_V_SLIDE_and_2_nl : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL CONV_V_SLIDE_acc_1_nl : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL CONV_NB_K_CONV_NB_K_CONV_V_SLIDE_not_4_nl : STD_LOGIC;
  SIGNAL or_54_nl : STD_LOGIC;
  SIGNAL PAD_for_acc_nl : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL CONV_V_SLIDE_acc_nl : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL CONV_H_SLIDE_acc_nl : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL CONV_NB_K_mux_6_nl : STD_LOGIC;
  SIGNAL nor_12_nl : STD_LOGIC;
  SIGNAL and_115_nl : STD_LOGIC;
  SIGNAL CONV_K_W_mul_10_nl : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL CONV_NB_K_mux_1_nl : STD_LOGIC;
  SIGNAL CONV_K_D_mux_1_nl : STD_LOGIC;
  SIGNAL CONV_NB_K_not_37_nl : STD_LOGIC;
  SIGNAL PAD_PAD_and_1_nl : STD_LOGIC;
  SIGNAL PAD_for_for_else_acc_nl : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL PAD_for_for_acc_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL PAD_for_for_acc_1_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL CONV_V_SLIDE_mux_1_nl : STD_LOGIC;
  SIGNAL CONV_H_SLIDE_mux_1_nl : STD_LOGIC;
  SIGNAL CONV_K_D_CONV_K_D_and_1_nl : STD_LOGIC;
  SIGNAL PAD_mux_1_nl : STD_LOGIC;
  SIGNAL PAD_for_for_if_PAD_for_for_if_mul_nl : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL CONV_K_W_mul_nl : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL CONV_K_W_acc_1_nl : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL CONV_NB_K_not_32_nl : STD_LOGIC;
  SIGNAL CONV_NB_K_not_31_nl : STD_LOGIC;
  SIGNAL CONV_NB_K_not_33_nl : STD_LOGIC;
  SIGNAL CONV_K_W_acc_21_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL CONV_K_W_acc_16_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL PAD_for_for_oif_acc_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL PAD_for_for_else_oif_acc_nl : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL PAD_for_for_else_else_acc_10_nl : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL PAD_for_for_else_else_acc_14_nl : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL PAD_for_for_else_else_mul_7_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL CONV_H_SLIDE_else_mux_nl : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL CONV_H_SLIDE_else_if_acc_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL CONV_H_SLIDE_if_not_nl : STD_LOGIC;
  SIGNAL asn_pad_input_rsci_data_in_d_nor_nl : STD_LOGIC;
  SIGNAL pad_input_pad_input_mux_1_nl : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL pad_input_pad_input_mux_nl : STD_LOGIC;
  SIGNAL pad_input_pad_input_mux_2_nl : STD_LOGIC;
  COMPONENT apply_conv_core_core_fsm
    PORT(
      clk : IN STD_LOGIC;
      rst : IN STD_LOGIC;
      fsm_output : OUT STD_LOGIC_VECTOR (1 DOWNTO 0)
    );
  END COMPONENT;
  SIGNAL apply_conv_core_core_fsm_inst_fsm_output : STD_LOGIC_VECTOR (1 DOWNTO 0);

  FUNCTION MUX1HOT_v_11_3_2(input_2 : STD_LOGIC_VECTOR(10 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(10 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(10 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(10 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(10 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_2_3_2(input_2 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(1 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(1 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_7_3_2(input_2 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(6 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(6 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_8_3_2(input_2 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(7 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(7 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX_s_1_2_2(input_0 : STD_LOGIC;
  input_1 : STD_LOGIC;
  sel : STD_LOGIC)
  RETURN STD_LOGIC IS
    VARIABLE result : STD_LOGIC;
    VARIABLE tmp : STD_LOGIC;

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_10_2_2(input_0 : STD_LOGIC_VECTOR(9 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(9 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(9 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(9 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_11_2_2(input_0 : STD_LOGIC_VECTOR(10 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(10 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(10 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(10 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_14_2_2(input_0 : STD_LOGIC_VECTOR(13 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(13 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(13 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(13 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_2_2_2(input_0 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(1 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(1 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_4_81_2(input_0 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_3 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_4 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_5 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_6 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_7 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_8 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_9 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_10 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_11 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_12 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_13 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_14 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_15 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_16 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_17 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_18 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_19 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_20 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_21 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_22 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_23 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_24 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_25 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_26 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_27 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_28 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_29 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_30 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_31 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_32 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_33 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_34 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_35 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_36 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_37 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_38 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_39 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_40 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_41 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_42 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_43 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_44 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_45 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_46 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_47 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_48 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_49 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_50 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_51 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_52 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_53 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_54 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_55 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_56 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_57 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_58 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_59 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_60 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_61 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_62 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_63 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_64 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_65 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_66 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_67 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_68 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_69 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_70 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_71 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_72 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_73 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_74 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_75 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_76 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_77 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_78 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_79 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_80 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(6 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(3 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(3 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN "0000000" =>
          result := input_0;
        WHEN "0000001" =>
          result := input_1;
        WHEN "0000010" =>
          result := input_2;
        WHEN "0000011" =>
          result := input_3;
        WHEN "0000100" =>
          result := input_4;
        WHEN "0000101" =>
          result := input_5;
        WHEN "0000110" =>
          result := input_6;
        WHEN "0000111" =>
          result := input_7;
        WHEN "0001000" =>
          result := input_8;
        WHEN "0001001" =>
          result := input_9;
        WHEN "0001010" =>
          result := input_10;
        WHEN "0001011" =>
          result := input_11;
        WHEN "0001100" =>
          result := input_12;
        WHEN "0001101" =>
          result := input_13;
        WHEN "0001110" =>
          result := input_14;
        WHEN "0001111" =>
          result := input_15;
        WHEN "0010000" =>
          result := input_16;
        WHEN "0010001" =>
          result := input_17;
        WHEN "0010010" =>
          result := input_18;
        WHEN "0010011" =>
          result := input_19;
        WHEN "0010100" =>
          result := input_20;
        WHEN "0010101" =>
          result := input_21;
        WHEN "0010110" =>
          result := input_22;
        WHEN "0010111" =>
          result := input_23;
        WHEN "0011000" =>
          result := input_24;
        WHEN "0011001" =>
          result := input_25;
        WHEN "0011010" =>
          result := input_26;
        WHEN "0011011" =>
          result := input_27;
        WHEN "0011100" =>
          result := input_28;
        WHEN "0011101" =>
          result := input_29;
        WHEN "0011110" =>
          result := input_30;
        WHEN "0011111" =>
          result := input_31;
        WHEN "0100000" =>
          result := input_32;
        WHEN "0100001" =>
          result := input_33;
        WHEN "0100010" =>
          result := input_34;
        WHEN "0100011" =>
          result := input_35;
        WHEN "0100100" =>
          result := input_36;
        WHEN "0100101" =>
          result := input_37;
        WHEN "0100110" =>
          result := input_38;
        WHEN "0100111" =>
          result := input_39;
        WHEN "0101000" =>
          result := input_40;
        WHEN "0101001" =>
          result := input_41;
        WHEN "0101010" =>
          result := input_42;
        WHEN "0101011" =>
          result := input_43;
        WHEN "0101100" =>
          result := input_44;
        WHEN "0101101" =>
          result := input_45;
        WHEN "0101110" =>
          result := input_46;
        WHEN "0101111" =>
          result := input_47;
        WHEN "0110000" =>
          result := input_48;
        WHEN "0110001" =>
          result := input_49;
        WHEN "0110010" =>
          result := input_50;
        WHEN "0110011" =>
          result := input_51;
        WHEN "0110100" =>
          result := input_52;
        WHEN "0110101" =>
          result := input_53;
        WHEN "0110110" =>
          result := input_54;
        WHEN "0110111" =>
          result := input_55;
        WHEN "0111000" =>
          result := input_56;
        WHEN "0111001" =>
          result := input_57;
        WHEN "0111010" =>
          result := input_58;
        WHEN "0111011" =>
          result := input_59;
        WHEN "0111100" =>
          result := input_60;
        WHEN "0111101" =>
          result := input_61;
        WHEN "0111110" =>
          result := input_62;
        WHEN "0111111" =>
          result := input_63;
        WHEN "1000000" =>
          result := input_64;
        WHEN "1000001" =>
          result := input_65;
        WHEN "1000010" =>
          result := input_66;
        WHEN "1000011" =>
          result := input_67;
        WHEN "1000100" =>
          result := input_68;
        WHEN "1000101" =>
          result := input_69;
        WHEN "1000110" =>
          result := input_70;
        WHEN "1000111" =>
          result := input_71;
        WHEN "1001000" =>
          result := input_72;
        WHEN "1001001" =>
          result := input_73;
        WHEN "1001010" =>
          result := input_74;
        WHEN "1001011" =>
          result := input_75;
        WHEN "1001100" =>
          result := input_76;
        WHEN "1001101" =>
          result := input_77;
        WHEN "1001110" =>
          result := input_78;
        WHEN "1001111" =>
          result := input_79;
        WHEN others =>
          result := input_80;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_7_2_2(input_0 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(6 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(6 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_8_2_2(input_0 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(7 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(7 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

BEGIN
  -- Default Constant Signal Assignments

  conv_in_rsc_triosy_obj : mgc_hls.mgc_ioport_comps_v11.mgc_io_sync_v1
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => conv_in_rsc_triosy_obj_ld,
      lz => conv_in_rsc_triosy_lz
    );
  conv_out_rsc_triosy_obj : mgc_hls.mgc_ioport_comps_v11.mgc_io_sync_v1
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => conv_out_rsc_triosy_obj_ld,
      lz => conv_out_rsc_triosy_lz
    );
  apply_conv_core_core_fsm_inst : apply_conv_core_core_fsm
    PORT MAP(
      clk => clk,
      rst => rst,
      fsm_output => apply_conv_core_core_fsm_inst_fsm_output
    );
  fsm_output <= apply_conv_core_core_fsm_inst_fsm_output;

  CONV_NB_K_CONV_NB_K_nor_2_m1c <= NOT(asn_PAD_d_1_0_lpi_1_nor_cse OR lfst_exit_CONV_NB_K_lpi_1_dfm_1);
  CONV_NB_K_and_8_rgt <= exit_CONV_V_SLIDE_lpi_1_dfm_2 AND CONV_NB_K_equal_tmp;
  CONV_NB_K_and_17_cse <= CONV_K_W_acc_tmp_2 AND (NOT or_dcpl_31);
  mux_nl <= MUX_s_1_2_2(CONV_K_D_acc_tmp_2, CONV_K_W_acc_tmp_2, or_dcpl_6);
  nor_tmp <= NOT(mux_nl OR or_dcpl_31);
  nor_14_rgt <= NOT(or_dcpl_6 OR or_dcpl_31 OR nor_tmp);
  mux_10_nl <= MUX_s_1_2_2(CONV_H_SLIDE_acc_itm_3, (NOT or_dcpl_6), or_dcpl_7);
  and_103_tmp <= mux_10_nl AND (NOT or_dcpl_31);
  nor_15_rgt <= NOT(or_dcpl_7 OR or_dcpl_31 OR and_103_tmp);
  CONV_K_D_l_and_1_rgt <= or_dcpl_6 AND (NOT or_dcpl_31);
  asn_PAD_d_1_0_lpi_1_nor_cse <= NOT(PAD_for_for_acc_itm_7 OR PAD_for_acc_itm_6);
  lfst_exit_CONV_NB_K_lpi_1_dfm_1 <= lfst_exit_CONV_NB_K_lpi_1_dfm_3_1 AND (NOT exitL_exit_CONV_NB_K_sva);
  lfst_exit_CONV_NB_K_lpi_1_dfm_0 <= lfst_exit_CONV_NB_K_lpi_1_dfm_3_0 AND (NOT exitL_exit_CONV_NB_K_sva);
  PAD_for_acc_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(PAD_for_r_6_0_sva_1(6
      DOWNTO 1)), 6), 7) + SIGNED'( "1000011"), 7));
  PAD_for_acc_itm_6 <= readindex(STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(PAD_for_acc_nl),
      7)), 6);
  CONV_NB_K_acc_tmp_2 <= (CONV_NB_K_i_1_0_sva_1(0)) XOR (CONV_NB_K_i_1_0_sva_1(1));
  CONV_V_SLIDE_acc_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED('1' & (NOT (CONV_V_SLIDE_j_6_0_sva_1(6
      DOWNTO 3)))) + SIGNED'( "01111"), 5));
  CONV_V_SLIDE_acc_itm_4 <= readindex(STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(CONV_V_SLIDE_acc_nl),
      5)), 4);
  CONV_H_SLIDE_acc_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED('1' & (NOT (CONV_H_SLIDE_k_7_0_sva_1(7
      DOWNTO 5)))) + SIGNED'( "0101"), 4));
  CONV_H_SLIDE_acc_itm_3 <= readindex(STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(CONV_H_SLIDE_acc_nl),
      4)), 3);
  CONV_K_D_acc_tmp_2 <= (CONV_K_D_l_1_0_sva_1(0)) XOR (CONV_K_D_l_1_0_sva_1(1));
  CONV_K_H_acc_tmp_2 <= (CONV_K_H_m_1_0_sva_1(0)) XOR (CONV_K_H_m_1_0_sva_1(1));
  CONV_NB_K_mux_6_nl <= MUX_s_1_2_2((NOT exit_CONV_NB_K_lpi_1_dfm_1), lfst_exit_CONV_NB_K_lpi_1_dfm_1,
      CONV_NB_K_equal_tmp_1);
  lfst_exit_CONV_NB_K_lpi_1_dfm_3_1_mx0w0 <= (CONV_NB_K_mux_6_nl AND (NOT CONV_NB_K_and_ssc))
      OR CONV_NB_K_and_6_ssc;
  lfst_exit_CONV_NB_K_lpi_1_dfm_3_0_mx0w0 <= (lfst_exit_CONV_NB_K_lpi_1_dfm_0 AND
      (NOT(CONV_NB_K_and_6_ssc OR CONV_NB_K_equal_tmp))) OR CONV_NB_K_and_ssc;
  and_106_tmp <= CONV_NB_K_equal_tmp_7 AND main_stage_0_3 AND (exit_CONV_H_SLIDE_sva_9
      OR (NOT reg_exit_CONV_K_D_lpi_1_dfm_2_st_2_cse));
  CONV_NB_K_and_10_tmp <= reg_exit_CONV_K_D_lpi_1_dfm_2_st_2_cse AND CONV_NB_K_equal_tmp_7
      AND main_stage_0_3;
  nor_12_nl <= NOT(CONV_NB_K_and_10_tmp OR and_106_tmp);
  and_115_nl <= CONV_NB_K_and_10_tmp AND (NOT and_106_tmp);
  temp_1_lpi_1_mx0 <= MUX1HOT_v_11_3_2(temp_1_lpi_2, STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(exit_CONV_H_SLIDE_sva_9,
      1),11)), temp_1_sva_1, STD_LOGIC_VECTOR'( nor_12_nl & and_115_nl & and_106_tmp));
  CONV_K_W_mul_10_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED'( SIGNED(pad_input_rsci_data_out_d)
      * SIGNED(CONV_K_W_mux_3_itm_5)), 11));
  temp_1_sva_1 <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(CONV_H_SLIDE_CONV_H_SLIDE_and_itm_3)
      + CONV_SIGNED(SIGNED(CONV_K_W_mul_10_nl), 11), 11));
  lfst_exit_CONV_H_SLIDE_1_lpi_1_dfm <= lfst_exit_CONV_H_SLIDE_1_lpi_2 AND lfst_exit_CONV_V_SLIDE_1_lpi_3;
  PAD_acc_tmp_2 <= (PAD_d_1_0_sva_1(0)) XOR (PAD_d_1_0_sva_1(1));
  CONV_NB_K_mux_1_nl <= MUX_s_1_2_2((NOT CONV_NB_K_acc_tmp_2), exit_CONV_NB_K_sva_1,
      or_dcpl_20);
  exit_CONV_NB_K_lpi_1_dfm_1 <= CONV_NB_K_mux_1_nl AND exit_CONV_V_SLIDE_lpi_1_dfm_2;
  CONV_K_D_mux_1_nl <= MUX_s_1_2_2((NOT CONV_K_D_acc_tmp_2), exit_CONV_K_D_sva_2,
      or_dcpl_6);
  exit_CONV_K_D_lpi_1_dfm_2 <= CONV_K_D_mux_1_nl AND exit_CONV_K_H_lpi_1_dfm_2;
  CONV_NB_K_equal_tmp <= lfst_exit_CONV_NB_K_lpi_1_dfm_1 AND (NOT lfst_exit_CONV_NB_K_lpi_1_dfm_0);
  PAD_for_r_6_0_lpi_1_dfm <= MUX_v_7_2_2(STD_LOGIC_VECTOR'("0000000"), PAD_for_r_6_0_lpi_3,
      PAD_unequal_tmp);
  PAD_for_for_else_else_acc_11_sdt <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(PAD_for_r_6_0_lpi_1_dfm),
      7), 8) + CONV_SIGNED(CONV_SIGNED(SIGNED('1' & (PAD_for_for_else_else_acc_5_psp_sva(7
      DOWNTO 5))), 4), 8), 8));
  CONV_NB_K_not_37_nl <= NOT exitL_exit_CONV_NB_K_sva;
  PAD_d_1_0_lpi_1_dfm <= MUX_v_2_2_2(STD_LOGIC_VECTOR'("00"), PAD_d_1_0_lpi_2, CONV_NB_K_not_37_nl);
  PAD_for_for_else_else_acc_5_psp_sva <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(PAD_for_for_c_7_0_lpi_1_dfm)
      + UNSIGNED'( "11111111"), 8));
  PAD_PAD_and_1_nl <= lfst_exit_PAD_for_1_lpi_2 AND PAD_unequal_tmp;
  PAD_for_for_c_7_0_lpi_1_dfm <= MUX_v_8_2_2(STD_LOGIC_VECTOR'("00000000"), PAD_for_for_c_7_0_lpi_3,
      PAD_PAD_and_1_nl);
  PAD_for_for_else_acc_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(PAD_for_for_c_7_0_lpi_1_dfm),
      8), 9) + SIGNED'( "111111111"), 9));
  PAD_for_for_else_acc_itm_8 <= readindex(STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(PAD_for_for_else_acc_nl),
      9)), 8);
  PAD_for_r_6_0_sva_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(PAD_for_r_6_0_lpi_1_dfm)
      + UNSIGNED'( "0000001"), 7));
  PAD_for_for_acc_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(PAD_for_for_c_7_0_sva_1(7
      DOWNTO 1)), 7), 8) + SIGNED'( "10101111"), 8));
  PAD_for_for_acc_itm_7 <= readindex(STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(PAD_for_for_acc_nl),
      8)), 7);
  PAD_for_for_c_7_0_sva_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(PAD_for_for_c_7_0_lpi_1_dfm)
      + UNSIGNED'( "00000001"), 8));
  PAD_for_for_acc_1_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(PAD_for_r_6_0_lpi_1_dfm),
      7), 8) + SIGNED'( "11111111"), 8));
  PAD_for_for_acc_1_itm_7 <= readindex(STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(PAD_for_for_acc_1_nl),
      8)), 7);
  PAD_unequal_tmp <= lfst_exit_CONV_NB_K_lpi_1_dfm_1 OR lfst_exit_CONV_NB_K_lpi_1_dfm_0;
  CONV_NB_K_i_1_0_sva_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(CONV_NB_K_i_1_0_lpi_3)
      + UNSIGNED'( "01"), 2));
  CONV_V_SLIDE_j_6_0_sva_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(CONV_V_SLIDE_j_6_0_lpi_3)
      + UNSIGNED'( "0000001"), 7));
  CONV_H_SLIDE_k_7_0_sva_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(CONV_H_SLIDE_k_7_0_lpi_1_dfm)
      + UNSIGNED'( "00000001"), 8));
  CONV_H_SLIDE_k_7_0_lpi_1_dfm <= MUX_v_8_2_2(STD_LOGIC_VECTOR'("00000000"), CONV_H_SLIDE_k_7_0_lpi_2,
      lfst_exit_CONV_V_SLIDE_1_lpi_3);
  CONV_K_D_l_1_0_sva_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(CONV_K_D_l_1_0_lpi_1_dfm)
      + UNSIGNED'( "01"), 2));
  CONV_K_D_l_1_0_lpi_1_dfm <= MUX_v_2_2_2(STD_LOGIC_VECTOR'("00"), CONV_K_D_l_1_0_lpi_2,
      lfst_exit_CONV_H_SLIDE_1_lpi_1_dfm);
  CONV_K_H_m_1_0_sva_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(CONV_K_H_m_1_0_lpi_1_dfm)
      + UNSIGNED'( "01"), 2));
  CONV_K_H_m_1_0_lpi_1_dfm <= MUX_v_2_2_2(STD_LOGIC_VECTOR'("00"), CONV_K_H_m_1_0_lpi_2,
      lfst_exit_CONV_K_D_1_lpi_1_dfm);
  CONV_V_SLIDE_mux_1_nl <= MUX_s_1_2_2(CONV_V_SLIDE_acc_itm_4, exit_CONV_V_SLIDE_sva_3,
      or_dcpl_25);
  exit_CONV_V_SLIDE_lpi_1_dfm_2 <= CONV_V_SLIDE_mux_1_nl AND exit_CONV_H_SLIDE_lpi_1_dfm_2;
  CONV_H_SLIDE_mux_1_nl <= MUX_s_1_2_2(CONV_H_SLIDE_acc_itm_3, exit_CONV_H_SLIDE_sva_7,
      or_dcpl_7);
  exit_CONV_H_SLIDE_lpi_1_dfm_2 <= CONV_H_SLIDE_mux_1_nl AND exit_CONV_K_D_lpi_1_dfm_2;
  exit_CONV_K_H_lpi_1_dfm_2 <= NOT(CONV_K_H_acc_tmp_2 OR CONV_K_W_acc_tmp_2);
  CONV_K_W_acc_tmp_2 <= (CONV_K_W_n_1_0_sva_1(0)) XOR (CONV_K_W_n_1_0_sva_1(1));
  CONV_K_W_n_1_0_sva_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(CONV_K_W_n_1_0_lpi_1_dfm)
      + UNSIGNED'( "01"), 2));
  CONV_K_D_CONV_K_D_and_1_nl <= lfst_exit_CONV_K_H_1_lpi_2 AND lfst_exit_CONV_K_D_1_lpi_1_dfm;
  CONV_K_W_n_1_0_lpi_1_dfm <= MUX_v_2_2_2(STD_LOGIC_VECTOR'("00"), CONV_K_W_n_1_0_lpi_2,
      CONV_K_D_CONV_K_D_and_1_nl);
  lfst_exit_CONV_K_D_1_lpi_1_dfm <= lfst_exit_CONV_K_D_1_lpi_2 AND lfst_exit_CONV_H_SLIDE_1_lpi_1_dfm;
  PAD_mux_1_nl <= MUX_s_1_2_2((NOT PAD_acc_tmp_2), exit_PAD_sva_2, or_dcpl_3);
  exit_PAD_lpi_1_dfm_2 <= PAD_mux_1_nl AND asn_PAD_d_1_0_lpi_1_nor_cse;
  CONV_NB_K_nor_dfs <= NOT(CONV_NB_K_equal_tmp OR CONV_NB_K_equal_tmp_1);
  CONV_NB_K_equal_tmp_1 <= lfst_exit_CONV_NB_K_lpi_1_dfm_1 AND lfst_exit_CONV_NB_K_lpi_1_dfm_0;
  PAD_d_1_0_sva_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(PAD_d_1_0_lpi_1_dfm)
      + UNSIGNED'( "01"), 2));
  PAD_for_for_if_PAD_for_for_if_mul_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'(
      UNSIGNED(PAD_for_r_6_0_lpi_1_dfm) * UNSIGNED'( "1010001")), 14));
  PAD_for_for_if_acc_1_ncse <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(PAD_for_for_if_PAD_for_for_if_mul_nl),
      14) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(PAD_for_for_c_7_0_lpi_1_dfm(7 DOWNTO
      1)), 7), 14), 14));
  CONV_K_W_acc_2_psp_sva <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(CONV_H_SLIDE_k_7_0_lpi_1_dfm)
      + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(CONV_K_W_n_1_0_lpi_1_dfm), 2), 8), 8));
  CONV_K_W_acc_1_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(CONV_V_SLIDE_j_6_0_lpi_3)
      + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(CONV_K_H_m_1_0_lpi_1_dfm), 2), 7), 7));
  CONV_K_W_mul_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( CONV_UNSIGNED(UNSIGNED(CONV_K_W_acc_1_nl),
      7) * UNSIGNED'( "1010001")), 14));
  CONV_K_W_acc_15_sdt <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(CONV_K_W_mul_nl),
      14) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(CONV_K_W_acc_2_psp_sva(7 DOWNTO
      1)), 7), 14), 14));
  CONV_NB_K_and_ssc <= (NOT exit_PAD_lpi_1_dfm_2) AND CONV_NB_K_nor_dfs;
  CONV_NB_K_and_6_ssc <= exit_PAD_lpi_1_dfm_2 AND CONV_NB_K_nor_dfs;
  CONV_NB_K_not_32_nl <= NOT exitL_exit_CONV_NB_K_sva;
  o_c_7_0_lpi_1_dfm <= MUX_v_8_2_2(STD_LOGIC_VECTOR'("00000000"), o_c_7_0_lpi_2,
      CONV_NB_K_not_32_nl);
  CONV_H_SLIDE_acc_14_sdt <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(o_r_6_0_lpi_1_dfm),
      7), 8) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(CONV_H_SLIDE_acc_12_sdt_6_0(6
      DOWNTO 2)), 5), 8), 8));
  CONV_NB_K_not_31_nl <= NOT exitL_exit_CONV_NB_K_sva;
  o_d_1_0_lpi_1_dfm <= MUX_v_2_2_2(STD_LOGIC_VECTOR'("00"), o_d_1_0_lpi_2, CONV_NB_K_not_31_nl);
  CONV_H_SLIDE_acc_12_sdt_6_0 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(o_r_6_0_lpi_1_dfm)
      + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(o_c_7_0_lpi_1_dfm(7 DOWNTO 5)), 3),
      7), 7));
  CONV_NB_K_not_33_nl <= NOT exitL_exit_CONV_NB_K_sva;
  o_r_6_0_lpi_1_dfm <= MUX_v_7_2_2(STD_LOGIC_VECTOR'("0000000"), o_r_6_0_lpi_2, CONV_NB_K_not_33_nl);
  CONV_K_W_acc_21_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(CONV_K_H_m_1_0_lpi_1_dfm),
      2), 3) + CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(CONV_K_D_l_1_0_lpi_1_dfm(1),
      1), 1), 3), 3));
  CONV_K_W_acc_16_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(CONV_K_H_m_1_0_lpi_1_dfm),
      2), 3) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(CONV_K_W_n_1_0_lpi_1_dfm), 2),
      3), 3));
  CONV_K_W_acc_18_sdt <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(CONV_K_W_acc_21_nl),
      3)) & (CONV_K_D_l_1_0_lpi_1_dfm(0))) + CONV_UNSIGNED(UNSIGNED(CONV_K_W_acc_16_nl),
      4), 4));
  or_dcpl_1 <= exitL_exit_CONV_NB_K_sva OR (NOT lfst_exit_CONV_NB_K_lpi_1_dfm_3_1);
  or_dcpl_3 <= PAD_for_for_acc_itm_7 OR PAD_for_acc_itm_6;
  or_dcpl_6 <= CONV_K_W_acc_tmp_2 OR CONV_K_H_acc_tmp_2;
  or_dcpl_7 <= or_dcpl_6 OR CONV_K_D_acc_tmp_2;
  and_dcpl_30 <= main_stage_0_3 AND lfst_exit_CONV_NB_K_lpi_1_dfm_st_2_1_1;
  or_dcpl_20 <= or_dcpl_7 OR (NOT CONV_H_SLIDE_acc_itm_3) OR (NOT CONV_V_SLIDE_acc_itm_4);
  or_dcpl_21 <= CONV_K_D_acc_tmp_2 OR (NOT CONV_H_SLIDE_acc_itm_3);
  or_dcpl_23 <= or_dcpl_1 OR or_dcpl_6;
  or_dcpl_24 <= or_dcpl_23 OR or_dcpl_21 OR (NOT CONV_V_SLIDE_acc_itm_4);
  or_dcpl_25 <= or_dcpl_6 OR or_dcpl_21;
  or_dcpl_26 <= CONV_K_H_acc_tmp_2 OR CONV_K_D_acc_tmp_2;
  or_dcpl_28 <= or_dcpl_1 OR CONV_K_W_acc_tmp_2;
  or_dcpl_31 <= or_dcpl_1 OR lfst_exit_CONV_NB_K_lpi_1_dfm_3_0;
  PAD_for_for_oif_acc_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(PAD_for_r_6_0_lpi_1_dfm),
      7), 8) + SIGNED'( "10000111"), 8));
  PAD_for_for_oif_acc_itm_7 <= readindex(STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(PAD_for_for_oif_acc_nl),
      8)), 7);
  PAD_for_for_else_oif_acc_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(PAD_for_for_c_7_0_lpi_1_dfm),
      8), 9) + SIGNED'( "101011111"), 9));
  PAD_for_for_else_oif_acc_itm_8 <= readindex(STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(PAD_for_for_else_oif_acc_nl),
      9)), 8);
  PAD_for_for_else_else_acc_14_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(PAD_for_r_6_0_lpi_1_dfm),
      7), 9) + CONV_SIGNED(CONV_SIGNED(SIGNED(PAD_for_for_else_else_acc_11_sdt(7
      DOWNTO 2)), 6), 9), 9));
  PAD_for_for_else_else_mul_7_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(PAD_d_1_0_lpi_1_dfm)
      * UNSIGNED'( "1001011")), 8));
  PAD_for_for_else_else_acc_10_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(PAD_for_for_else_else_acc_14_nl),
      9)) & (PAD_for_for_else_else_acc_11_sdt(1 DOWNTO 0))) + UNSIGNED(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(PAD_for_for_else_else_mul_7_nl),
      8)) & STD_LOGIC_VECTOR'( "011")), 11));
  conv_in_rsci_addr_d <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(PAD_for_for_else_else_acc_10_nl),
      11)) & (PAD_for_for_else_else_acc_5_psp_sva(4 DOWNTO 0));
  conv_in_rsci_re_d <= NOT(or_dcpl_1 AND (NOT PAD_for_for_acc_1_itm_7) AND PAD_for_for_oif_acc_itm_7
      AND (NOT PAD_for_for_else_acc_itm_8) AND PAD_for_for_else_oif_acc_itm_8 AND
      (fsm_output(1)));
  CONV_H_SLIDE_else_if_acc_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED('1' & (NOT (temp_1_sva_1(9
      DOWNTO 8)))) + SIGNED'( "001"), 3));
  CONV_H_SLIDE_else_mux_nl <= MUX_v_11_2_2(temp_1_sva_1, STD_LOGIC_VECTOR'( "00011111111"),
      readindex(STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(CONV_H_SLIDE_else_if_acc_nl),
      3)), 2));
  CONV_H_SLIDE_if_not_nl <= NOT (temp_1_sva_1(10));
  conv_out_rsci_data_in_d <= MUX_v_11_2_2(STD_LOGIC_VECTOR'("00000000000"), CONV_H_SLIDE_else_mux_nl,
      CONV_H_SLIDE_if_not_nl);
  conv_out_rsci_addr_d <= CONV_H_SLIDE_acc_11_itm_2_10_3_2 & CONV_H_SLIDE_acc_11_itm_2_2_2
      & CONV_H_SLIDE_acc_11_itm_2_1_0_2 & o_c_slc_o_c_7_0_4_0_itm_6;
  conv_out_rsci_we_d <= NOT(and_dcpl_30 AND (NOT lfst_exit_CONV_NB_K_lpi_1_dfm_st_2_0_1)
      AND reg_exit_CONV_K_D_lpi_1_dfm_2_st_2_cse);
  asn_pad_input_rsci_data_in_d_nor_nl <= NOT(PAD_for_for_if_PAD_for_for_if_or_itm_3
      OR PAD_for_for_else_if_PAD_for_for_else_if_or_itm_3);
  pad_input_rsci_data_in_d <= MUX_v_10_2_2(STD_LOGIC_VECTOR'("0000000000"), conv_in_rsci_data_out_d,
      asn_pad_input_rsci_data_in_d_nor_nl);
  pad_input_pad_input_mux_1_nl <= MUX_v_14_2_2(reg_PAD_for_for_if_acc_itm_1_14_1_cse,
      CONV_K_W_acc_14_itm_1_14_1_1, lfst_exit_CONV_NB_K_lpi_1_dfm_st_1_1);
  pad_input_pad_input_mux_nl <= MUX_s_1_2_2(reg_PAD_for_for_if_acc_itm_1_0_cse, CONV_K_W_acc_14_itm_1_0_1,
      lfst_exit_CONV_NB_K_lpi_1_dfm_st_1_1);
  pad_input_pad_input_mux_2_nl <= MUX_s_1_2_2(reg_PAD_for_for_c_slc_PAD_for_for_c_7_0_0_cse,
      CONV_K_W_slc_CONV_K_W_acc_2_psp_0_itm_3, lfst_exit_CONV_NB_K_lpi_1_dfm_st_1_1);
  pad_input_rsci_addr_d <= pad_input_pad_input_mux_1_nl & pad_input_pad_input_mux_nl
      & pad_input_pad_input_mux_2_nl;
  pad_input_rsci_re_d <= NOT(main_stage_0_2 AND lfst_exit_CONV_NB_K_lpi_1_dfm_st_1_1
      AND (NOT lfst_exit_CONV_NB_K_lpi_1_dfm_st_1_0));
  pad_input_rsci_we_d <= NOT((NOT lfst_exit_CONV_NB_K_lpi_1_dfm_st_1_1) AND main_stage_0_2);
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        conv_out_rsc_triosy_obj_ld <= '0';
        conv_in_rsc_triosy_obj_ld <= '0';
        CONV_H_SLIDE_acc_11_itm_2_10_3_2 <= STD_LOGIC_VECTOR'( "00000000");
        CONV_H_SLIDE_acc_11_itm_2_2_2 <= '0';
        CONV_H_SLIDE_acc_11_itm_2_1_0_2 <= STD_LOGIC_VECTOR'( "00");
        o_c_slc_o_c_7_0_4_0_itm_6 <= STD_LOGIC_VECTOR'( "00000");
        exit_CONV_NB_K_lpi_1_dfm_1_st_4 <= '0';
        reg_exit_CONV_K_D_lpi_1_dfm_2_st_2_cse <= '0';
        CONV_H_SLIDE_CONV_H_SLIDE_and_itm_3 <= STD_LOGIC_VECTOR'( "00000000000");
        CONV_K_W_mux_3_itm_5 <= STD_LOGIC_VECTOR'( "0000");
        lfst_exit_CONV_NB_K_lpi_1_dfm_st_2_1_1 <= '0';
        lfst_exit_CONV_NB_K_lpi_1_dfm_st_2_0_1 <= '0';
        reg_PAD_for_for_if_acc_itm_1_14_1_cse <= STD_LOGIC_VECTOR'( "00000000000000");
        reg_PAD_for_for_if_acc_itm_1_0_cse <= '0';
        reg_PAD_for_for_c_slc_PAD_for_for_c_7_0_0_cse <= '0';
        PAD_for_for_else_if_PAD_for_for_else_if_or_itm_3 <= '0';
        PAD_for_for_if_PAD_for_for_if_or_itm_3 <= '0';
        CONV_K_W_acc_14_itm_1_14_1_1 <= STD_LOGIC_VECTOR'( "00000000000000");
        CONV_K_W_acc_14_itm_1_0_1 <= '0';
        CONV_K_W_slc_CONV_K_W_acc_2_psp_0_itm_3 <= '0';
        lfst_exit_CONV_NB_K_lpi_1_dfm_st_1_1 <= '0';
        lfst_exit_CONV_NB_K_lpi_1_dfm_st_1_0 <= '0';
        PAD_for_for_c_7_0_lpi_3 <= STD_LOGIC_VECTOR'( "00000000");
        PAD_for_r_6_0_lpi_3 <= STD_LOGIC_VECTOR'( "0000000");
        lfst_exit_CONV_V_SLIDE_1_lpi_3 <= '0';
        CONV_H_SLIDE_k_7_0_lpi_2 <= STD_LOGIC_VECTOR'( "00000000");
        PAD_d_1_0_lpi_2 <= STD_LOGIC_VECTOR'( "00");
        main_stage_0_2 <= '0';
        main_stage_0_3 <= '0';
        temp_1_lpi_2 <= STD_LOGIC_VECTOR'( "00000000000");
        exit_CONV_H_SLIDE_sva_9 <= '0';
        CONV_NB_K_equal_tmp_7 <= '0';
        lfst_exit_CONV_H_SLIDE_1_lpi_1_dfm_4 <= '0';
        exit_CONV_NB_K_lpi_1_dfm_1_st_3 <= '0';
        exit_CONV_K_D_lpi_1_dfm_2_st_3 <= '0';
        o_c_slc_o_c_7_0_4_0_itm_5 <= STD_LOGIC_VECTOR'( "00000");
        CONV_H_SLIDE_acc_11_itm_1_10_3_1 <= STD_LOGIC_VECTOR'( "00000000");
        CONV_H_SLIDE_acc_11_itm_1_1_0_1 <= STD_LOGIC_VECTOR'( "00");
        CONV_H_SLIDE_acc_11_itm_1_2_1 <= '0';
        CONV_K_W_mux_3_itm_4 <= STD_LOGIC_VECTOR'( "0000");
        exit_CONV_H_SLIDE_sva_8 <= '0';
        CONV_NB_K_equal_tmp_6 <= '0';
        o_d_1_0_lpi_2 <= STD_LOGIC_VECTOR'( "00");
        o_c_7_0_lpi_2 <= STD_LOGIC_VECTOR'( "00000000");
        o_r_6_0_lpi_2 <= STD_LOGIC_VECTOR'( "0000000");
      ELSE
        conv_out_rsc_triosy_obj_ld <= and_dcpl_30 AND (NOT lfst_exit_CONV_NB_K_lpi_1_dfm_st_2_0_1)
            AND exit_CONV_NB_K_lpi_1_dfm_1_st_4;
        conv_in_rsc_triosy_obj_ld <= lfst_exit_CONV_NB_K_lpi_1_dfm_1 AND (NOT CONV_K_W_acc_tmp_2)
            AND (NOT(CONV_K_H_acc_tmp_2 OR CONV_K_D_acc_tmp_2)) AND CONV_H_SLIDE_acc_itm_3
            AND CONV_V_SLIDE_acc_itm_4 AND (NOT(CONV_NB_K_acc_tmp_2 OR lfst_exit_CONV_NB_K_lpi_1_dfm_3_0));
        CONV_H_SLIDE_acc_11_itm_2_10_3_2 <= CONV_H_SLIDE_acc_11_itm_1_10_3_1;
        CONV_H_SLIDE_acc_11_itm_2_2_2 <= CONV_H_SLIDE_acc_11_itm_1_2_1;
        CONV_H_SLIDE_acc_11_itm_2_1_0_2 <= CONV_H_SLIDE_acc_11_itm_1_1_0_1;
        o_c_slc_o_c_7_0_4_0_itm_6 <= o_c_slc_o_c_7_0_4_0_itm_5;
        exit_CONV_NB_K_lpi_1_dfm_1_st_4 <= exit_CONV_NB_K_lpi_1_dfm_1_st_3;
        reg_exit_CONV_K_D_lpi_1_dfm_2_st_2_cse <= exit_CONV_K_D_lpi_1_dfm_2_st_3;
        CONV_H_SLIDE_CONV_H_SLIDE_and_itm_3 <= MUX_v_11_2_2(STD_LOGIC_VECTOR'("00000000000"),
            temp_1_lpi_1_mx0, lfst_exit_CONV_H_SLIDE_1_lpi_1_dfm_4);
        CONV_K_W_mux_3_itm_5 <= CONV_K_W_mux_3_itm_4;
        lfst_exit_CONV_NB_K_lpi_1_dfm_st_2_1_1 <= lfst_exit_CONV_NB_K_lpi_1_dfm_st_1_1;
        lfst_exit_CONV_NB_K_lpi_1_dfm_st_2_0_1 <= lfst_exit_CONV_NB_K_lpi_1_dfm_st_1_0;
        reg_PAD_for_for_if_acc_itm_1_14_1_cse <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(PAD_for_for_if_acc_1_ncse(13
            DOWNTO 1)), 13), 14) + CONV_UNSIGNED(UNSIGNED(PAD_for_for_if_mul_nl),
            14), 14));
        reg_PAD_for_for_if_acc_itm_1_0_cse <= PAD_for_for_if_acc_1_ncse(0);
        reg_PAD_for_for_c_slc_PAD_for_for_c_7_0_0_cse <= PAD_for_for_c_7_0_lpi_1_dfm(0);
        PAD_for_for_else_if_PAD_for_for_else_if_or_itm_3 <= (NOT PAD_for_for_else_oif_acc_itm_8)
            OR PAD_for_for_else_acc_itm_8;
        PAD_for_for_if_PAD_for_for_if_or_itm_3 <= (NOT PAD_for_for_oif_acc_itm_7)
            OR PAD_for_for_acc_1_itm_7;
        CONV_K_W_acc_14_itm_1_14_1_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(CONV_K_W_acc_15_sdt(13
            DOWNTO 1)), 13), 14) + CONV_UNSIGNED(UNSIGNED(CONV_K_W_mul_11_nl), 14),
            14));
        CONV_K_W_acc_14_itm_1_0_1 <= CONV_K_W_acc_15_sdt(0);
        CONV_K_W_slc_CONV_K_W_acc_2_psp_0_itm_3 <= CONV_K_W_acc_2_psp_sva(0);
        lfst_exit_CONV_NB_K_lpi_1_dfm_st_1_1 <= lfst_exit_CONV_NB_K_lpi_1_dfm_1;
        lfst_exit_CONV_NB_K_lpi_1_dfm_st_1_0 <= lfst_exit_CONV_NB_K_lpi_1_dfm_0;
        PAD_for_for_c_7_0_lpi_3 <= MUX_v_8_2_2(STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(NOT
            PAD_for_acc_itm_6, 1),8)), PAD_for_for_c_7_0_sva_1, CONV_NB_K_CONV_NB_K_nor_3_nl);
        PAD_for_r_6_0_lpi_3 <= MUX1HOT_v_7_3_2(STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(NOT
            PAD_acc_tmp_2, 1),7)), PAD_for_r_6_0_sva_1, PAD_for_r_6_0_lpi_1_dfm,
            STD_LOGIC_VECTOR'( CONV_NB_K_and_1_nl & CONV_NB_K_and_19_nl & CONV_NB_K_and_20_nl));
        lfst_exit_CONV_V_SLIDE_1_lpi_3 <= MUX_s_1_2_2(PAD_PAD_and_4_nl, (NOT exit_CONV_V_SLIDE_lpi_1_dfm_2),
            CONV_NB_K_equal_tmp);
        CONV_H_SLIDE_k_7_0_lpi_2 <= MUX1HOT_v_8_3_2(STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_V_SLIDE_acc_itm_4,
            1),8)), CONV_H_SLIDE_k_7_0_sva_1, CONV_H_SLIDE_k_7_0_lpi_1_dfm, STD_LOGIC_VECTOR'(
            (NOT or_dcpl_25) & CONV_H_SLIDE_k_and_nl & or_dcpl_7));
        PAD_d_1_0_lpi_2 <= MUX_v_2_2_2(PAD_d_1_0_lpi_1_dfm, PAD_d_1_0_sva_1, asn_PAD_d_1_0_lpi_1_nor_cse);
        main_stage_0_2 <= fsm_output(1);
        main_stage_0_3 <= main_stage_0_2;
        temp_1_lpi_2 <= temp_1_lpi_1_mx0;
        exit_CONV_H_SLIDE_sva_9 <= exit_CONV_H_SLIDE_sva_8;
        CONV_NB_K_equal_tmp_7 <= CONV_NB_K_equal_tmp_6;
        lfst_exit_CONV_H_SLIDE_1_lpi_1_dfm_4 <= lfst_exit_CONV_H_SLIDE_1_lpi_1_dfm;
        exit_CONV_NB_K_lpi_1_dfm_1_st_3 <= exit_CONV_NB_K_lpi_1_dfm_1;
        exit_CONV_K_D_lpi_1_dfm_2_st_3 <= exit_CONV_K_D_lpi_1_dfm_2;
        o_c_slc_o_c_7_0_4_0_itm_5 <= o_c_7_0_lpi_1_dfm(4 DOWNTO 0);
        CONV_H_SLIDE_acc_11_itm_1_10_3_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(CONV_H_SLIDE_acc_14_sdt(7
            DOWNTO 1)), 7), 8) + CONV_UNSIGNED(UNSIGNED(CONV_H_SLIDE_mul_nl), 8),
            8));
        CONV_H_SLIDE_acc_11_itm_1_1_0_1 <= CONV_H_SLIDE_acc_12_sdt_6_0(1 DOWNTO 0);
        CONV_H_SLIDE_acc_11_itm_1_2_1 <= CONV_H_SLIDE_acc_14_sdt(0);
        CONV_K_W_mux_3_itm_4 <= MUX_v_4_81_2(STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "1111"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "1111"), STD_LOGIC_VECTOR'(
            "0101"), STD_LOGIC_VECTOR'( "1111"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "1111"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "1111"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "1111"), STD_LOGIC_VECTOR'(
            "0101"), STD_LOGIC_VECTOR'( "1111"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "1111"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "1111"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "1111"), STD_LOGIC_VECTOR'(
            "0101"), STD_LOGIC_VECTOR'( "1111"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
            "1111"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(CONV_K_W_asn_pref_pref_pref_4_6_CONV_K_W_acc_nl),
            7)));
        exit_CONV_H_SLIDE_sva_8 <= CONV_H_SLIDE_acc_itm_3;
        CONV_NB_K_equal_tmp_6 <= CONV_NB_K_equal_tmp;
        o_d_1_0_lpi_2 <= MUX_v_2_2_2(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(CONV_NB_K_acc_1_nl),
            2)), o_d_1_0_lpi_1_dfm, or_dcpl_24);
        o_c_7_0_lpi_2 <= MUX_v_8_2_2(CONV_V_SLIDE_CONV_V_SLIDE_and_3_nl, o_c_7_0_lpi_1_dfm,
            or_dcpl_1);
        o_r_6_0_lpi_2 <= MUX_v_7_2_2(CONV_V_SLIDE_CONV_V_SLIDE_and_2_nl, o_r_6_0_lpi_1_dfm,
            or_54_nl);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        lfst_exit_PAD_for_1_lpi_2 <= '0';
      ELSIF ( lfst_exit_CONV_NB_K_lpi_1_dfm_1 = '0' ) THEN
        lfst_exit_PAD_for_1_lpi_2 <= NOT asn_PAD_d_1_0_lpi_1_nor_cse;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        exit_CONV_NB_K_sva_1 <= '0';
      ELSIF ( (NOT((fsm_output(0)) OR or_dcpl_24)) = '1' ) THEN
        exit_CONV_NB_K_sva_1 <= NOT CONV_NB_K_acc_tmp_2;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        CONV_NB_K_i_1_0_lpi_3 <= STD_LOGIC_VECTOR'( "00");
      ELSIF ( (CONV_NB_K_nor_dfs OR CONV_NB_K_and_8_rgt) = '1' ) THEN
        CONV_NB_K_i_1_0_lpi_3 <= MUX_v_2_2_2(STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(NOT
            exit_PAD_lpi_1_dfm_2, 1),2)), CONV_NB_K_i_1_0_sva_1, CONV_NB_K_and_8_rgt);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        exit_CONV_V_SLIDE_sva_3 <= '0';
      ELSIF ( (NOT((fsm_output(0)) OR or_dcpl_28 OR or_dcpl_26 OR (NOT CONV_H_SLIDE_acc_itm_3)))
          = '1' ) THEN
        exit_CONV_V_SLIDE_sva_3 <= CONV_V_SLIDE_acc_itm_4;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        CONV_V_SLIDE_j_6_0_lpi_3 <= STD_LOGIC_VECTOR'( "0000000");
      ELSIF ( (NOT(or_dcpl_25 AND CONV_NB_K_equal_tmp)) = '1' ) THEN
        CONV_V_SLIDE_j_6_0_lpi_3 <= MUX1HOT_v_7_3_2(STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(NOT
            exit_PAD_lpi_1_dfm_2, 1),7)), STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(NOT
            CONV_NB_K_acc_tmp_2, 1),7)), CONV_V_SLIDE_j_6_0_sva_1, STD_LOGIC_VECTOR'(
            CONV_NB_K_nor_dfs & CONV_NB_K_and_18_nl & CONV_V_SLIDE_j_and_nl));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        exit_CONV_H_SLIDE_sva_7 <= '0';
      ELSIF ( (NOT((fsm_output(0)) OR or_dcpl_28 OR or_dcpl_26)) = '1' ) THEN
        exit_CONV_H_SLIDE_sva_7 <= CONV_H_SLIDE_acc_itm_3;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        exit_CONV_K_D_sva_2 <= '0';
      ELSIF ( (NOT((fsm_output(0)) OR or_dcpl_23)) = '1' ) THEN
        exit_CONV_K_D_sva_2 <= NOT CONV_K_D_acc_tmp_2;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        CONV_K_W_n_1_0_lpi_2 <= STD_LOGIC_VECTOR'( "00");
      ELSIF ( or_dcpl_31 = '0' ) THEN
        CONV_K_W_n_1_0_lpi_2 <= MUX_v_2_2_2(STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(NOT
            CONV_K_H_acc_tmp_2, 1),2)), CONV_K_W_n_1_0_sva_1, or_53_nl);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        lfst_exit_CONV_K_H_1_lpi_2 <= '0';
      ELSIF ( or_dcpl_1 = '0' ) THEN
        lfst_exit_CONV_K_H_1_lpi_2 <= NOT exit_CONV_K_H_lpi_1_dfm_2;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        CONV_K_H_m_1_0_lpi_2 <= STD_LOGIC_VECTOR'( "00");
      ELSIF ( (nor_14_rgt OR CONV_NB_K_and_17_cse OR nor_tmp) = '1' ) THEN
        CONV_K_H_m_1_0_lpi_2 <= MUX1HOT_v_2_3_2(STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(NOT
            CONV_K_D_acc_tmp_2, 1),2)), CONV_K_H_m_1_0_lpi_1_dfm, CONV_K_H_m_1_0_sva_1,
            STD_LOGIC_VECTOR'( nor_14_rgt & CONV_NB_K_and_17_cse & nor_tmp));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        lfst_exit_CONV_K_D_1_lpi_2 <= '0';
      ELSIF ( or_dcpl_1 = '0' ) THEN
        lfst_exit_CONV_K_D_1_lpi_2 <= NOT exit_CONV_K_D_lpi_1_dfm_2;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        CONV_K_D_l_1_0_lpi_2 <= STD_LOGIC_VECTOR'( "00");
      ELSIF ( (nor_15_rgt OR CONV_K_D_l_and_1_rgt OR and_103_tmp) = '1' ) THEN
        CONV_K_D_l_1_0_lpi_2 <= MUX1HOT_v_2_3_2(STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_H_SLIDE_acc_itm_3,
            1),2)), CONV_K_D_l_1_0_lpi_1_dfm, CONV_K_D_l_1_0_sva_1, STD_LOGIC_VECTOR'(
            nor_15_rgt & CONV_K_D_l_and_1_rgt & and_103_tmp));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        lfst_exit_CONV_H_SLIDE_1_lpi_2 <= '0';
      ELSIF ( or_dcpl_1 = '0' ) THEN
        lfst_exit_CONV_H_SLIDE_1_lpi_2 <= NOT exit_CONV_H_SLIDE_lpi_1_dfm_2;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        lfst_exit_CONV_NB_K_lpi_1_dfm_3_1 <= '0';
      ELSIF ( (fsm_output(0)) = '0' ) THEN
        lfst_exit_CONV_NB_K_lpi_1_dfm_3_1 <= lfst_exit_CONV_NB_K_lpi_1_dfm_3_1_mx0w0;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        exitL_exit_CONV_NB_K_sva <= '1';
      ELSIF ( (fsm_output(0)) = '0' ) THEN
        exitL_exit_CONV_NB_K_sva <= NOT(lfst_exit_CONV_NB_K_lpi_1_dfm_3_1_mx0w0 OR
            lfst_exit_CONV_NB_K_lpi_1_dfm_3_0_mx0w0);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        lfst_exit_CONV_NB_K_lpi_1_dfm_3_0 <= '0';
      ELSIF ( (fsm_output(0)) = '0' ) THEN
        lfst_exit_CONV_NB_K_lpi_1_dfm_3_0 <= lfst_exit_CONV_NB_K_lpi_1_dfm_3_0_mx0w0;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        exit_PAD_sva_2 <= '0';
      ELSIF ( (NOT((fsm_output(0)) OR lfst_exit_CONV_NB_K_lpi_1_dfm_1 OR or_dcpl_3))
          = '1' ) THEN
        exit_PAD_sva_2 <= NOT PAD_acc_tmp_2;
      END IF;
    END IF;
  END PROCESS;
  PAD_for_for_if_mul_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(PAD_d_1_0_lpi_1_dfm)
      * UNSIGNED'( "1001101001101")), 14));
  CONV_K_W_mul_11_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(CONV_K_D_l_1_0_lpi_1_dfm)
      * UNSIGNED'( "1001101001101")), 14));
  CONV_NB_K_CONV_NB_K_nor_3_nl <= NOT((NOT PAD_for_for_acc_itm_7) OR lfst_exit_CONV_NB_K_lpi_1_dfm_1);
  CONV_NB_K_and_1_nl <= asn_PAD_d_1_0_lpi_1_nor_cse AND (NOT lfst_exit_CONV_NB_K_lpi_1_dfm_1);
  CONV_NB_K_and_19_nl <= (NOT PAD_for_for_acc_itm_7) AND CONV_NB_K_CONV_NB_K_nor_2_m1c;
  CONV_NB_K_and_20_nl <= PAD_for_for_acc_itm_7 AND CONV_NB_K_CONV_NB_K_nor_2_m1c;
  PAD_PAD_and_4_nl <= lfst_exit_CONV_V_SLIDE_1_lpi_3 AND (NOT exit_PAD_lpi_1_dfm_2);
  CONV_H_SLIDE_k_and_nl <= (NOT or_dcpl_7) AND or_dcpl_25;
  CONV_H_SLIDE_mul_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(o_d_1_0_lpi_1_dfm)
      * UNSIGNED'( "1001011")), 8));
  CONV_K_W_acc_20_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(CONV_K_D_l_1_0_lpi_1_dfm),
      2), 3) + CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(CONV_K_W_acc_18_sdt(3),
      1), 1), 3), 3));
  CONV_K_W_mul_12_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(CONV_NB_K_i_1_0_lpi_3)
      * UNSIGNED'( "11011")), 7));
  CONV_K_W_asn_pref_pref_pref_4_6_CONV_K_W_acc_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(CONV_K_W_acc_20_nl),
      3)) & (CONV_K_W_acc_18_sdt(2 DOWNTO 0))), 6), 7) + CONV_UNSIGNED(UNSIGNED(CONV_K_W_mul_12_nl),
      7), 7));
  CONV_NB_K_acc_1_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(o_d_1_0_lpi_1_dfm)
      + UNSIGNED'( "01"), 2));
  CONV_H_SLIDE_acc_5_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(o_c_7_0_lpi_1_dfm)
      + UNSIGNED'( "00000001"), 8));
  CONV_H_SLIDE_mux_4_nl <= MUX_v_8_2_2(o_c_7_0_lpi_1_dfm, STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(CONV_H_SLIDE_acc_5_nl),
      8)), exit_CONV_K_D_lpi_1_dfm_2);
  CONV_V_SLIDE_CONV_V_SLIDE_and_3_nl <= CONV_H_SLIDE_mux_4_nl AND STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(NOT
      exit_CONV_H_SLIDE_lpi_1_dfm_2, 1),8)) AND STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(NOT
      exit_CONV_V_SLIDE_lpi_1_dfm_2, 1),8));
  CONV_V_SLIDE_acc_1_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(o_r_6_0_lpi_1_dfm)
      + SIGNED'( "0000001"), 7));
  CONV_NB_K_CONV_NB_K_CONV_V_SLIDE_not_4_nl <= NOT exit_CONV_V_SLIDE_lpi_1_dfm_2;
  CONV_V_SLIDE_CONV_V_SLIDE_and_2_nl <= MUX_v_7_2_2(STD_LOGIC_VECTOR'("0000000"),
      STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(CONV_V_SLIDE_acc_1_nl), 7)), CONV_NB_K_CONV_NB_K_CONV_V_SLIDE_not_4_nl);
  or_54_nl <= (NOT exit_CONV_H_SLIDE_lpi_1_dfm_2) OR or_dcpl_1;
  CONV_NB_K_and_18_nl <= (NOT or_dcpl_20) AND CONV_NB_K_equal_tmp;
  CONV_V_SLIDE_j_and_nl <= (NOT or_dcpl_25) AND or_dcpl_20 AND CONV_NB_K_equal_tmp;
  or_53_nl <= (NOT(CONV_K_W_acc_tmp_2 OR or_dcpl_31 OR CONV_K_H_acc_tmp_2)) OR CONV_NB_K_and_17_cse;
END v12;

-- ------------------------------------------------------------------
--  Design Unit:    apply_conv
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.funcs.ALL;
USE mgc_hls.mgc_ioport_comps_v11.ALL;
USE mgc_hls.singleport_ram_be_pkg.ALL;


ENTITY apply_conv IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    conv_in_rsc_addr : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
    conv_in_rsc_re : OUT STD_LOGIC;
    conv_in_rsc_data_out : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
    conv_in_rsc_triosy_lz : OUT STD_LOGIC;
    conv_out_rsc_data_in : OUT STD_LOGIC_VECTOR (10 DOWNTO 0);
    conv_out_rsc_addr : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
    conv_out_rsc_we : OUT STD_LOGIC;
    conv_out_rsc_triosy_lz : OUT STD_LOGIC
  );
END apply_conv;

ARCHITECTURE v12 OF apply_conv IS
  -- Default Constants
  SIGNAL PWR : STD_LOGIC;
  SIGNAL GND : STD_LOGIC;

  -- Interconnect Declarations
  SIGNAL conv_in_rsci_addr_d : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL conv_in_rsci_re_d : STD_LOGIC;
  SIGNAL conv_in_rsci_data_out_d : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL conv_out_rsci_data_in_d : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL conv_out_rsci_addr_d : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL conv_out_rsci_we_d : STD_LOGIC;
  SIGNAL pad_input_rsci_data_in_d : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL pad_input_rsci_addr_d : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL pad_input_rsci_re_d : STD_LOGIC;
  SIGNAL pad_input_rsci_we_d : STD_LOGIC;
  SIGNAL pad_input_rsci_data_out_d : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL pad_input_rsc_en : STD_LOGIC;
  SIGNAL pad_input_rsc_data_out : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL pad_input_rsc_we : STD_LOGIC;
  SIGNAL pad_input_rsc_re : STD_LOGIC;
  SIGNAL pad_input_rsc_addr : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL pad_input_rsc_data_in : STD_LOGIC_VECTOR (9 DOWNTO 0);

  SIGNAL pad_input_rsc_comp_data_in : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL pad_input_rsc_comp_addr : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL pad_input_rsc_comp_re : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL pad_input_rsc_comp_we : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL pad_input_rsc_comp_data_out : STD_LOGIC_VECTOR (9 DOWNTO 0);

  COMPONENT ram_Xilinx_ARTIX_7_2_RAMSB_singleport_rport_1_57600_10_16_0_1_0_0_0_1_1_1_0_57600_10_1_gen
    PORT(
      data_out : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
      re : OUT STD_LOGIC;
      addr : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
      addr_d : IN STD_LOGIC_VECTOR (15 DOWNTO 0);
      re_d : IN STD_LOGIC;
      data_out_d : OUT STD_LOGIC_VECTOR (9 DOWNTO 0)
    );
  END COMPONENT;
  SIGNAL conv_in_rsci_data_out : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL conv_in_rsci_addr : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL conv_in_rsci_addr_d_1 : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL conv_in_rsci_data_out_d_1 : STD_LOGIC_VECTOR (9 DOWNTO 0);

  COMPONENT ram_Xilinx_ARTIX_7_2_RAMSB_singleport_wport_2_57600_11_16_0_1_0_0_0_1_1_1_0_57600_11_1_gen
    PORT(
      we : OUT STD_LOGIC;
      addr : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
      data_in : OUT STD_LOGIC_VECTOR (10 DOWNTO 0);
      data_in_d : IN STD_LOGIC_VECTOR (10 DOWNTO 0);
      addr_d : IN STD_LOGIC_VECTOR (15 DOWNTO 0);
      we_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL conv_out_rsci_addr : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL conv_out_rsci_data_in : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL conv_out_rsci_data_in_d_1 : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL conv_out_rsci_addr_d_1 : STD_LOGIC_VECTOR (15 DOWNTO 0);

  COMPONENT ram_Xilinx_ARTIX_7_2_RAMSB_singleport_rwport_en_3_59292_10_16_0_1_0_0_0_1_1_1_0_59292_10_1_gen
    PORT(
      en : OUT STD_LOGIC;
      data_out : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
      we : OUT STD_LOGIC;
      re : OUT STD_LOGIC;
      addr : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
      data_in : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
      data_in_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
      addr_d : IN STD_LOGIC_VECTOR (15 DOWNTO 0);
      re_d : IN STD_LOGIC;
      we_d : IN STD_LOGIC;
      data_out_d : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
      en_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL pad_input_rsci_data_out : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL pad_input_rsci_addr : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL pad_input_rsci_data_in : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL pad_input_rsci_data_in_d_1 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL pad_input_rsci_addr_d_1 : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL pad_input_rsci_data_out_d_1 : STD_LOGIC_VECTOR (9 DOWNTO 0);

  COMPONENT apply_conv_core
    PORT(
      clk : IN STD_LOGIC;
      rst : IN STD_LOGIC;
      conv_in_rsc_triosy_lz : OUT STD_LOGIC;
      conv_out_rsc_triosy_lz : OUT STD_LOGIC;
      conv_in_rsci_addr_d : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
      conv_in_rsci_re_d : OUT STD_LOGIC;
      conv_in_rsci_data_out_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
      conv_out_rsci_data_in_d : OUT STD_LOGIC_VECTOR (10 DOWNTO 0);
      conv_out_rsci_addr_d : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
      conv_out_rsci_we_d : OUT STD_LOGIC;
      pad_input_rsci_data_in_d : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
      pad_input_rsci_addr_d : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
      pad_input_rsci_re_d : OUT STD_LOGIC;
      pad_input_rsci_we_d : OUT STD_LOGIC;
      pad_input_rsci_data_out_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0)
    );
  END COMPONENT;
  SIGNAL apply_conv_core_inst_conv_in_rsci_addr_d : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL apply_conv_core_inst_conv_in_rsci_data_out_d : STD_LOGIC_VECTOR (9 DOWNTO
      0);
  SIGNAL apply_conv_core_inst_conv_out_rsci_data_in_d : STD_LOGIC_VECTOR (10 DOWNTO
      0);
  SIGNAL apply_conv_core_inst_conv_out_rsci_addr_d : STD_LOGIC_VECTOR (15 DOWNTO
      0);
  SIGNAL apply_conv_core_inst_pad_input_rsci_data_in_d : STD_LOGIC_VECTOR (9 DOWNTO
      0);
  SIGNAL apply_conv_core_inst_pad_input_rsci_addr_d : STD_LOGIC_VECTOR (15 DOWNTO
      0);
  SIGNAL apply_conv_core_inst_pad_input_rsci_data_out_d : STD_LOGIC_VECTOR (9 DOWNTO
      0);

BEGIN
  -- Default Constant Signal Assignments
  PWR <= '1';
  GND <= '0';

  pad_input_rsc_comp : mgc_hls.singleport_ram_be_pkg.singleport_ram_be
    GENERIC MAP(
      ram_id => 3,
      words => 59292,
      width => 10,
      addr_width => 16,
      a_reset_active => 0,
      s_reset_active => 1,
      enable_active => 0,
      re_active => 0,
      we_active => 0,
      num_byte_enables => 1,
      clock_edge => 1,
      num_input_registers => 1,
      num_output_registers => 0,
      no_of_singleport_readwrite_port => 1
      )
    PORT MAP(
      data_in => pad_input_rsc_comp_data_in,
      addr => pad_input_rsc_comp_addr,
      re => pad_input_rsc_comp_re,
      we => pad_input_rsc_comp_we,
      data_out => pad_input_rsc_comp_data_out,
      clk => clk,
      a_rst => PWR,
      s_rst => rst,
      en => pad_input_rsc_en
    );
  pad_input_rsc_comp_data_in <= pad_input_rsc_data_in;
  pad_input_rsc_comp_addr <= pad_input_rsc_addr;
  pad_input_rsc_comp_re(0) <= pad_input_rsc_re;
  pad_input_rsc_comp_we(0) <= pad_input_rsc_we;
  pad_input_rsc_data_out <= pad_input_rsc_comp_data_out;

  conv_in_rsci : ram_Xilinx_ARTIX_7_2_RAMSB_singleport_rport_1_57600_10_16_0_1_0_0_0_1_1_1_0_57600_10_1_gen
    PORT MAP(
      data_out => conv_in_rsci_data_out,
      re => conv_in_rsc_re,
      addr => conv_in_rsci_addr,
      addr_d => conv_in_rsci_addr_d_1,
      re_d => conv_in_rsci_re_d,
      data_out_d => conv_in_rsci_data_out_d_1
    );
  conv_in_rsci_data_out <= conv_in_rsc_data_out;
  conv_in_rsc_addr <= conv_in_rsci_addr;
  conv_in_rsci_addr_d_1 <= conv_in_rsci_addr_d;
  conv_in_rsci_data_out_d <= conv_in_rsci_data_out_d_1;

  conv_out_rsci : ram_Xilinx_ARTIX_7_2_RAMSB_singleport_wport_2_57600_11_16_0_1_0_0_0_1_1_1_0_57600_11_1_gen
    PORT MAP(
      we => conv_out_rsc_we,
      addr => conv_out_rsci_addr,
      data_in => conv_out_rsci_data_in,
      data_in_d => conv_out_rsci_data_in_d_1,
      addr_d => conv_out_rsci_addr_d_1,
      we_d => conv_out_rsci_we_d
    );
  conv_out_rsc_addr <= conv_out_rsci_addr;
  conv_out_rsc_data_in <= conv_out_rsci_data_in;
  conv_out_rsci_data_in_d_1 <= conv_out_rsci_data_in_d;
  conv_out_rsci_addr_d_1 <= conv_out_rsci_addr_d;

  pad_input_rsci : ram_Xilinx_ARTIX_7_2_RAMSB_singleport_rwport_en_3_59292_10_16_0_1_0_0_0_1_1_1_0_59292_10_1_gen
    PORT MAP(
      en => pad_input_rsc_en,
      data_out => pad_input_rsci_data_out,
      we => pad_input_rsc_we,
      re => pad_input_rsc_re,
      addr => pad_input_rsci_addr,
      data_in => pad_input_rsci_data_in,
      data_in_d => pad_input_rsci_data_in_d_1,
      addr_d => pad_input_rsci_addr_d_1,
      re_d => pad_input_rsci_re_d,
      we_d => pad_input_rsci_we_d,
      data_out_d => pad_input_rsci_data_out_d_1,
      en_d => GND
    );
  pad_input_rsci_data_out <= pad_input_rsc_data_out;
  pad_input_rsc_addr <= pad_input_rsci_addr;
  pad_input_rsc_data_in <= pad_input_rsci_data_in;
  pad_input_rsci_data_in_d_1 <= pad_input_rsci_data_in_d;
  pad_input_rsci_addr_d_1 <= pad_input_rsci_addr_d;
  pad_input_rsci_data_out_d <= pad_input_rsci_data_out_d_1;

  apply_conv_core_inst : apply_conv_core
    PORT MAP(
      clk => clk,
      rst => rst,
      conv_in_rsc_triosy_lz => conv_in_rsc_triosy_lz,
      conv_out_rsc_triosy_lz => conv_out_rsc_triosy_lz,
      conv_in_rsci_addr_d => apply_conv_core_inst_conv_in_rsci_addr_d,
      conv_in_rsci_re_d => conv_in_rsci_re_d,
      conv_in_rsci_data_out_d => apply_conv_core_inst_conv_in_rsci_data_out_d,
      conv_out_rsci_data_in_d => apply_conv_core_inst_conv_out_rsci_data_in_d,
      conv_out_rsci_addr_d => apply_conv_core_inst_conv_out_rsci_addr_d,
      conv_out_rsci_we_d => conv_out_rsci_we_d,
      pad_input_rsci_data_in_d => apply_conv_core_inst_pad_input_rsci_data_in_d,
      pad_input_rsci_addr_d => apply_conv_core_inst_pad_input_rsci_addr_d,
      pad_input_rsci_re_d => pad_input_rsci_re_d,
      pad_input_rsci_we_d => pad_input_rsci_we_d,
      pad_input_rsci_data_out_d => apply_conv_core_inst_pad_input_rsci_data_out_d
    );
  conv_in_rsci_addr_d <= apply_conv_core_inst_conv_in_rsci_addr_d;
  apply_conv_core_inst_conv_in_rsci_data_out_d <= conv_in_rsci_data_out_d;
  conv_out_rsci_data_in_d <= apply_conv_core_inst_conv_out_rsci_data_in_d;
  conv_out_rsci_addr_d <= apply_conv_core_inst_conv_out_rsci_addr_d;
  pad_input_rsci_data_in_d <= apply_conv_core_inst_pad_input_rsci_data_in_d;
  pad_input_rsci_addr_d <= apply_conv_core_inst_pad_input_rsci_addr_d;
  apply_conv_core_inst_pad_input_rsci_data_out_d <= pad_input_rsci_data_out_d;

END v12;



